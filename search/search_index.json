{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"aiovantage","text":"<p>Python library for interacting with and controlling Vantage InFusion home automation controllers.</p> <p>This open-source, non-commercial library is not affiliated, associated, authorized, endorsed by, or in any way officially connected with Vantage, and is provided for interoperability purposes only.</p>"},{"location":"#example","title":"Example","text":"<pre><code>from aiovantage import Vantage\n\nasync with Vantage(\"192.168.1.2\", \"username\", \"password\") as vantage:\n    async for load in vantage.loads:\n        print(f\"{load.name} is at {load.level}%\")\n</code></pre> <p>See the examples folder for more examples.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Fetch object configuration from your Vantage system.</li> <li>Fetch object state and subscribe to state changes (e.g. load levels, sensor readings).</li> <li>Control devices (turn on lights, set thermostats, etc).</li> <li>Uses <code>asyncio</code> for non-blocking I/O.</li> <li>Uses SSL connections by default, with automatic reconnection.</li> <li>Supports both lazy and eager object fetching.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Add <code>aiovantage</code> as a dependency to your project, or install it directly:</p> <pre><code>pip install aiovantage\n</code></pre>"},{"location":"#supported-objects","title":"Supported objects","text":"<p>The following interfaces/controllers are currently supported.</p> Type Description Controller AnemoSensor Wind speed sensors <code>vantage.anemo_sensors</code> Area Rooms, etc <code>vantage.areas</code> BackBox Backboxes <code>vantage.back_boxes</code> Blind Shades, blinds <code>vantage.blinds</code> BlindGroups Groups of blinds <code>vantage.blind_groups</code> Buttons Keypad buttons <code>vantage.buttons</code> DryContacts Motion sensors, etc <code>vantage.dry_contacts</code> GMem Vantage variables <code>vantage.gmem</code> LightSensor Light sensors <code>vantage.light_sensors</code> Load Lights, relays, etc <code>vantage.loads</code> LoadGroup Groups of loads <code>vantage.load_groups</code> Master Vantage controllers <code>vantage.masters</code> Module Dimmer modules <code>vantage.modules</code> OmniSensor Power, current, etc <code>vantage.omni_sensors</code> PortDevice Port devices (hubs) <code>vantage.port_devices</code> PowerProfile Load power profiles <code>vantage.power_profiles</code> RGBLoad RGB lights <code>vantage.rgb_loads</code> Stations Keypads, etc <code>vantage.stations</code> Tasks Vantage tasks <code>vantage.tasks</code> Temperature Temperature sensors <code>vantage.temperatures</code> Thermostat Thermostats <code>vantage.thermostats</code> <p>If you have an object that you expect to show up in one of these controllers but is missing, please create an issue or submit a pull request.</p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#creating-a-client","title":"Creating a client","text":"<p>Begin by importing the <code>Vantage</code> class:</p> <pre><code>from aiovantage import Vantage\n</code></pre> <p>The most convenient way to create a client is by using the async context manager:</p> <pre><code>async with Vantage(\"hostname\", \"username\", \"password\") as vantage:\n    # ...use the vantage client\n</code></pre> <p>Alternatively, you can manage the lifecycle of the client yourself:</p> <pre><code>from aiovantage import Vantage\n\nvantage = Vantage(\"hostname\", \"username\", \"password\")\n# ...use the vantage client\nvantage.close()\n</code></pre>"},{"location":"#querying-objects","title":"Querying objects","text":"<p>The <code>Vantage</code> class exposes a number of controllers, which can be used to query objects. Controllers can either be populated lazily (by using <code>async for</code>), or eagerly (by using <code>controller.initialize()</code>).</p> <p>For example, to get a list of all loads:</p> <pre><code>async with Vantage(\"hostname\", \"username\", \"password\") as vantage:\n    async for load in vantage.loads:\n        print(f\"{load.name} is at {load.level}%\")\n</code></pre> <p>Alternatively, you can use <code>controller.initialize()</code> to eagerly fetch all objects:</p> <pre><code>async with Vantage(\"hostname\", \"username\", \"password\") as vantage:\n    await vantage.loads.initialize()\n    for load in vantage.loads:\n        print(f\"{load.name} is at {load.level}%\")\n</code></pre> <p>If you aren't interested in the state of the objects, you can call <code>controller.initialize(fetch_state=False)</code> to slightly speed up the initialization:</p> <pre><code>async with Vantage(\"hostname\", \"username\", \"password\") as vantage:\n    await vantage.loads.initialize(fetch_state=False)\n    for load in vantage.loads:\n        print(f\"{load.name}\")\n</code></pre> <p>All controllers implement a django-like query interface, which can be used to filter objects. You can either query by matching attributes:</p> <pre><code>async with Vantage(\"hostname\", \"username\", \"password\") as vantage:\n    async for load in vantage.loads.filter(name=\"Kitchen\"):\n        print(f\"{load.name} is at {load.level}%\")\n</code></pre> <p>Or by using a filter predicate:</p> <pre><code>async with Vantage(\"hostname\", \"username\", \"password\") as vantage:\n    async for load in vantage.loads.filter(lambda load: load.level &gt; 50):\n        print(f\"{load.name} is at {load.level}%\")\n</code></pre>"},{"location":"#fetching-a-single-object","title":"Fetching a single object","text":"<p>You can fetch a single object by id, by calling <code>controller.aget()</code> or <code>controller.get()</code>:</p> <pre><code>async with Vantage(\"hostname\", \"username\", \"password\") as vantage:\n    load = await vantage.loads.aget(118)\n    print(f\"{load.name} is at {load.level}%\")\n</code></pre> <p>These functions also implement the same query interface as <code>controller.filter()</code> for querying by attributes or filter predicate:</p> <pre><code>async with Vantage(\"hostname\", \"username\", \"password\") as vantage:\n    load = await vantage.loads.aget(name=\"Kitchen\")\n    print(f\"{load.name} is at {load.level}%\")\n</code></pre>"},{"location":"#controlling-objects","title":"Controlling objects","text":"<p>Objects also expose various methods for controlling state. For example, to turn on a load:</p> <pre><code>async with Vantage(\"hostname\", \"username\", \"password\") as vantage:\n    load = vantage.loads.aget(name=\"Study Lights\")\n    await load.turn_on()\n</code></pre>"},{"location":"#subscribing-to-state-changes","title":"Subscribing to state changes","text":"<p>You can subscribe to state changes by using the <code>controller.subscribe()</code> method:</p> <pre><code>def on_load_state_change(event, load, data):\n    print(f\"{load.name} is at {load.level}%\")\n\nasync with Vantage(\"hostname\", \"username\", \"password\") as vantage:\n    vantage.loads.subscribe(on_load_state_change)\n    await vantage.loads.initialize()\n</code></pre> <p>Note that a subscription will only receive state changes for objects that have populated into the controller.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>First off, thanks for taking the time to contribute!</p>"},{"location":"contributing/#set-up-development-environment","title":"Set up development environment","text":""},{"location":"contributing/#using-uv","title":"Using <code>uv</code>","text":"<p>aiovantage uses uv to run scripts, manage virtual environments, create reproducible builds, and publish packages. Check out the uv installation guide to get started.</p> <p>To set up your development environment, run the following commands:</p> <pre><code># Create a virtual environment\nuv venv\n\n# Install development dependencies\nuv pip install -e \".[dev]\"\n</code></pre> <p>If you'd like to run a command in a virtual environment with development dependencies available, prefix it with <code>uv run</code>. For example,</p> <pre><code>uv run python examples/dump_system.py hostname\n</code></pre>"},{"location":"contributing/#manually","title":"Manually","text":"<p>If you'd prefer to manage your own python environment, you can install the development dependencies manually.</p> <pre><code># Create a virtual environment\npython -m venv .venv\n\n# Activate the virtual environment\nsource .venv/bin/activate\n\n# Install development dependencies\npip install -e \".[dev]\"\n</code></pre>"},{"location":"contributing/#adding-support-for-new-devices","title":"Adding support for new devices","text":""},{"location":"contributing/#adding-a-new-object-type-to-an-existing-controller","title":"Adding a new object type to an existing controller","text":"<p>To add a new object type to an existing controller, follow these steps:</p> <ul> <li>Create a new xsdata-style <code>@dataclass</code> model in <code>src/aiovantage/_objects</code></li> <li>The object hierarchy should match the Vantage object hierarchy.</li> <li>The class name should exactly match the Vantage object name if possible, otherwise use class metadata to specify the name.</li> <li>Export the class in <code>src/aiovantage/objects.py</code>.</li> <li>Add the object type to the <code>vantage_types</code> tuple in the appropriate controller in <code>src/aiovantage/_controllers</code>, so we know to fetch it when populating the controller</li> <li>Test that the object appears in the controller as expected</li> </ul>"},{"location":"contributing/#adding-support-for-a-new-class-of-device","title":"Adding support for a new class of device","text":"<p>If you want to add support for a new class of device, you'll need to create a new controller. Please create an issue to discuss the new controller before you start working on it.</p>"},{"location":"contributing/#submit-your-work","title":"Submit your work","text":"<p>Submit your improvements, fixes, and new features to one at a time, using GitHub Pull Requests.</p> <p>Good pull requests remain focused in scope and avoid containing unrelated commits. If your contribution involves a significant amount of work or substantial changes to any part of the project, please open an issue to discuss it first to avoid any wasted or duplicate effort.</p>"},{"location":"contributing/#style-guidelines","title":"Style guidelines","text":"<p>Before submitting a pull request, make sure your code follows the style guidelines. This project uses pyright for type checking, and ruff for linting and formatting.</p> <p>Pull requests will trigger a CI check that blocks merging if the code does not pass the style guidelines.</p>"},{"location":"contributing/#running-checks-automatically-with-vscode","title":"Running checks automatically with vscode","text":"<p>If you are using vscode, you'll be prompted to install the recommended extensions when you open the workspace.</p>"},{"location":"contributing/#running-checks-manually","title":"Running checks manually","text":"<pre><code># Run type checking\nuv run pyright\n</code></pre> <pre><code># Run linting\nuv run ruff check\n</code></pre> <pre><code># Format code\nuv run ruff format\n</code></pre>"},{"location":"contributing/#build-a-package","title":"Build a package","text":"<p>To build the package, first update the version number:</p> <pre><code>bumpver update --patch # or --major --minor\n</code></pre> <p>Then build the package:</p> <pre><code>uv build\n</code></pre>"},{"location":"contributing/#publish-a-release","title":"Publish a release","text":"<p>To publish the package to PyPi:</p> <pre><code>uv publish\n</code></pre> <p>Don't forget to create a release on GitHub!</p>"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2023 James Smith\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"reference/aiovantage/","title":"aiovantage","text":""},{"location":"reference/aiovantage/#aiovantage","title":"aiovantage","text":"<p>Asynchronous Python library for controlling Vantage InFusion controllers.</p> <p>Modules:</p> <ul> <li> <code>command_client</code>           \u2013            <p>Clients for the Vantage Host Command (HC) service.</p> </li> <li> <code>config_client</code>           \u2013            <p>Client for the Vantage Application Communication Interface (ACI) service.</p> </li> <li> <code>controllers</code>           \u2013            <p>Controllers for managing collections of objects from the Vantage system.</p> </li> <li> <code>discovery</code>           \u2013            <p>Helper functions for discovering details about Vantage controllers.</p> </li> <li> <code>errors</code>           \u2013            <p>Client exceptions.</p> </li> <li> <code>events</code>           \u2013            <p>Event classes for Vantage controller events.</p> </li> <li> <code>object_interfaces</code>           \u2013            <p>Object interfaces classes.</p> </li> <li> <code>objects</code>           \u2013            <p>Vantage object definitions.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>Vantage</code>           \u2013            <p>Main client for interacting with Vantage systems.</p> </li> </ul>"},{"location":"reference/aiovantage/#aiovantage.Vantage","title":"Vantage","text":"<pre><code>Vantage(host: str, username: str | None = None, password: str | None = None, *, ssl: SSLContext | bool = True, ssl_context_factory: Callable[[], SSLContext] | None = None, config_port: int | None = None, command_port: int | None = None)\n</code></pre> <p>Main client for interacting with Vantage systems.</p> <p>The Vantage class manages the various connections to a Vantage system, as well as exposing \"controllers\" for fetching and interacting with objects in the system.</p> <p>Parameters:</p> <ul> <li> <code>host</code>               (<code>str</code>)           \u2013            <p>The hostname or IP address of the Vantage controller.</p> </li> <li> <code>username</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The username to use for authentication.</p> </li> <li> <code>password</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The password to use for authentication.</p> </li> <li> <code>ssl</code>               (<code>SSLContext | bool</code>, default:                   <code>True</code> )           \u2013            <p>The SSL context to use. True will use the default context, False will disable SSL.</p> </li> <li> <code>ssl_context_factory</code>               (<code>Callable[[], SSLContext] | None</code>, default:                   <code>None</code> )           \u2013            <p>A factory function to create an SSL context.</p> </li> <li> <code>config_port</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The port to use for the config client.</p> </li> <li> <code>command_port</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The port to use for the command client.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get</code>             \u2013              <p>Return the item with the given Vantage ID.</p> </li> <li> <code>close</code>             \u2013              <p>Close all client connections.</p> </li> <li> <code>initialize</code>             \u2013              <p>Initialize all controllers.</p> </li> <li> <code>fetch_state</code>             \u2013              <p>Fetch the state properties of all objects.</p> </li> <li> <code>enable_state_monitoring</code>             \u2013              <p>Monitor for state changes on all objects.</p> </li> <li> <code>disable_state_monitoring</code>             \u2013              <p>Stop monitoring for state changes on all objects.</p> </li> <li> <code>subscribe</code>             \u2013              <p>Subscribe to events from every controller.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>host</code>               (<code>str</code>)           \u2013            <p>The hostname or IP address of the Vantage controller.</p> </li> <li> <code>config_client</code>               (<code>ConfigClient</code>)           \u2013            <p>The config client instance.</p> </li> <li> <code>command_client</code>               (<code>CommandClient</code>)           \u2013            <p>The command client instance.</p> </li> <li> <code>event_stream</code>               (<code>EventStream</code>)           \u2013            <p>The event stream instance.</p> </li> <li> <code>anemo_sensors</code>               (<code>AnemoSensorsController</code>)           \u2013            <p>Controller for interacting with wind speed sensors.</p> </li> <li> <code>areas</code>               (<code>AreasController</code>)           \u2013            <p>Controller for interacting with areas.</p> </li> <li> <code>back_boxes</code>               (<code>BackBoxesController</code>)           \u2013            <p>Controller for interacting with back boxes.</p> </li> <li> <code>blinds</code>               (<code>BlindsController</code>)           \u2013            <p>Controller for interacting with blinds.</p> </li> <li> <code>blind_groups</code>               (<code>BlindGroupsController</code>)           \u2013            <p>Controller for interacting with groups of blinds.</p> </li> <li> <code>buttons</code>               (<code>ButtonsController</code>)           \u2013            <p>Controller for interacting with keypad buttons.</p> </li> <li> <code>dry_contacts</code>               (<code>DryContactsController</code>)           \u2013            <p>Controller for interacting with dry contacts.</p> </li> <li> <code>gmem</code>               (<code>GMemController</code>)           \u2013            <p>Controller for interacting with variables.</p> </li> <li> <code>light_sensors</code>               (<code>LightSensorsController</code>)           \u2013            <p>Controller for interacting with light sensors.</p> </li> <li> <code>loads</code>               (<code>LoadsController</code>)           \u2013            <p>Controller for interacting with loads (lights, fans, etc).</p> </li> <li> <code>load_groups</code>               (<code>LoadGroupsController</code>)           \u2013            <p>Controller for interacting with groups of loads.</p> </li> <li> <code>masters</code>               (<code>MastersController</code>)           \u2013            <p>Controller for interacting with Vantage Controllers.</p> </li> <li> <code>modules</code>               (<code>ModulesController</code>)           \u2013            <p>Controller for interacting with dimmer modules.</p> </li> <li> <code>omni_sensors</code>               (<code>OmniSensorsController</code>)           \u2013            <p>Controller for interacting with \"omni\" sensors.</p> </li> <li> <code>port_devices</code>               (<code>PortDevicesController</code>)           \u2013            <p>Controller for interacting with port devices.</p> </li> <li> <code>power_profiles</code>               (<code>PowerProfilesController</code>)           \u2013            <p>Controller for interacting with power profiles.</p> </li> <li> <code>rgb_loads</code>               (<code>RGBLoadsController</code>)           \u2013            <p>Controller for interacting with RGB loads.</p> </li> <li> <code>stations</code>               (<code>StationsController</code>)           \u2013            <p>Controller for interacting with stations (keypads, etc).</p> </li> <li> <code>tasks</code>               (<code>TasksController</code>)           \u2013            <p>Controller for interacting with tasks.</p> </li> <li> <code>temperatures</code>               (<code>TemperaturesController</code>)           \u2013            <p>Controller for interacting with temperature sensors.</p> </li> <li> <code>thermostats</code>               (<code>ThermostatsController</code>)           \u2013            <p>Controller for interacting with thermostats.</p> </li> </ul>"},{"location":"reference/aiovantage/#aiovantage.Vantage.host","title":"host  <code>property</code>","text":"<pre><code>host: str\n</code></pre> <p>The hostname or IP address of the Vantage controller.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.config_client","title":"config_client  <code>property</code>","text":"<pre><code>config_client: ConfigClient\n</code></pre> <p>The config client instance.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.command_client","title":"command_client  <code>property</code>","text":"<pre><code>command_client: CommandClient\n</code></pre> <p>The command client instance.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.event_stream","title":"event_stream  <code>property</code>","text":"<pre><code>event_stream: EventStream\n</code></pre> <p>The event stream instance.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.anemo_sensors","title":"anemo_sensors  <code>property</code>","text":"<pre><code>anemo_sensors: AnemoSensorsController\n</code></pre> <p>Controller for interacting with wind speed sensors.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.areas","title":"areas  <code>property</code>","text":"<pre><code>areas: AreasController\n</code></pre> <p>Controller for interacting with areas.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.back_boxes","title":"back_boxes  <code>property</code>","text":"<pre><code>back_boxes: BackBoxesController\n</code></pre> <p>Controller for interacting with back boxes.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.blinds","title":"blinds  <code>property</code>","text":"<pre><code>blinds: BlindsController\n</code></pre> <p>Controller for interacting with blinds.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.blind_groups","title":"blind_groups  <code>property</code>","text":"<pre><code>blind_groups: BlindGroupsController\n</code></pre> <p>Controller for interacting with groups of blinds.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.buttons","title":"buttons  <code>property</code>","text":"<pre><code>buttons: ButtonsController\n</code></pre> <p>Controller for interacting with keypad buttons.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.dry_contacts","title":"dry_contacts  <code>property</code>","text":"<pre><code>dry_contacts: DryContactsController\n</code></pre> <p>Controller for interacting with dry contacts.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.gmem","title":"gmem  <code>property</code>","text":"<pre><code>gmem: GMemController\n</code></pre> <p>Controller for interacting with variables.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.light_sensors","title":"light_sensors  <code>property</code>","text":"<pre><code>light_sensors: LightSensorsController\n</code></pre> <p>Controller for interacting with light sensors.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.loads","title":"loads  <code>property</code>","text":"<pre><code>loads: LoadsController\n</code></pre> <p>Controller for interacting with loads (lights, fans, etc).</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.load_groups","title":"load_groups  <code>property</code>","text":"<pre><code>load_groups: LoadGroupsController\n</code></pre> <p>Controller for interacting with groups of loads.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.masters","title":"masters  <code>property</code>","text":"<pre><code>masters: MastersController\n</code></pre> <p>Controller for interacting with Vantage Controllers.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.modules","title":"modules  <code>property</code>","text":"<pre><code>modules: ModulesController\n</code></pre> <p>Controller for interacting with dimmer modules.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.omni_sensors","title":"omni_sensors  <code>property</code>","text":"<pre><code>omni_sensors: OmniSensorsController\n</code></pre> <p>Controller for interacting with \"omni\" sensors.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.port_devices","title":"port_devices  <code>property</code>","text":"<pre><code>port_devices: PortDevicesController\n</code></pre> <p>Controller for interacting with port devices.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.power_profiles","title":"power_profiles  <code>property</code>","text":"<pre><code>power_profiles: PowerProfilesController\n</code></pre> <p>Controller for interacting with power profiles.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.rgb_loads","title":"rgb_loads  <code>property</code>","text":"<pre><code>rgb_loads: RGBLoadsController\n</code></pre> <p>Controller for interacting with RGB loads.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.stations","title":"stations  <code>property</code>","text":"<pre><code>stations: StationsController\n</code></pre> <p>Controller for interacting with stations (keypads, etc).</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.tasks","title":"tasks  <code>property</code>","text":"<pre><code>tasks: TasksController\n</code></pre> <p>Controller for interacting with tasks.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.temperatures","title":"temperatures  <code>property</code>","text":"<pre><code>temperatures: TemperaturesController\n</code></pre> <p>Controller for interacting with temperature sensors.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.thermostats","title":"thermostats  <code>property</code>","text":"<pre><code>thermostats: ThermostatsController\n</code></pre> <p>Controller for interacting with thermostats.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.get","title":"get","text":"<pre><code>get(vid: int) -&gt; SystemObject | None\n</code></pre> <p>Return the item with the given Vantage ID.</p> <p>Parameters:</p> <ul> <li> <code>vid</code>               (<code>int</code>)           \u2013            <p>The Vantage ID of the object.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>SystemObject | None</code>           \u2013            <p>The object if it exists and has been fetched by a controller, or None.</p> </li> </ul>"},{"location":"reference/aiovantage/#aiovantage.Vantage.close","title":"close","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Close all client connections.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.initialize","title":"initialize  <code>async</code>","text":"<pre><code>initialize(*, fetch_state: bool = True, enable_state_monitoring: bool = True) -&gt; None\n</code></pre> <p>Initialize all controllers.</p> <p>Parameters:</p> <ul> <li> <code>fetch_state</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to fetch the state properties of objects.</p> </li> <li> <code>enable_state_monitoring</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to monitor for state changes on objects.</p> </li> </ul>"},{"location":"reference/aiovantage/#aiovantage.Vantage.fetch_state","title":"fetch_state  <code>async</code>","text":"<pre><code>fetch_state() -&gt; None\n</code></pre> <p>Fetch the state properties of all objects.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.enable_state_monitoring","title":"enable_state_monitoring  <code>async</code>","text":"<pre><code>enable_state_monitoring() -&gt; None\n</code></pre> <p>Monitor for state changes on all objects.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.disable_state_monitoring","title":"disable_state_monitoring  <code>async</code>","text":"<pre><code>disable_state_monitoring() -&gt; None\n</code></pre> <p>Stop monitoring for state changes on all objects.</p>"},{"location":"reference/aiovantage/#aiovantage.Vantage.subscribe","title":"subscribe","text":"<pre><code>subscribe(event_type: type[T], callback: Callable[[T], None]) -&gt; Callable[[], None]\n</code></pre> <p>Subscribe to events from every controller.</p> <p>Parameters:</p> <ul> <li> <code>event_type</code>               (<code>type[T]</code>)           \u2013            <p>The type of event to subscribe to.</p> </li> <li> <code>callback</code>               (<code>Callable[[T], None]</code>)           \u2013            <p>The callback to call when the event is emitted.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable[[], None]</code>           \u2013            <p>A function to unsubscribe.</p> </li> </ul>"},{"location":"reference/aiovantage/command_client/","title":"aiovantage.command_client","text":""},{"location":"reference/aiovantage/command_client/#aiovantage.command_client","title":"aiovantage.command_client","text":"<p>Clients for the Vantage Host Command (HC) service.</p> <p>The Host Command service is a text-based service that allows interaction with devices controlled by a Vantage InFusion Controller.</p> <p>Among other things, this service allows you to change the state of devices (eg. turn on/off a light) as well as subscribe to status changes for devices.</p> <p>The service is exposed on port 3010 (SSL) by default, and on port 3001 (non-SSL) if this port has been opened by the firewall on the controller.</p> <p>The service is discoverable via mDNS as <code>_hc._tcp.local</code> and/or <code>_secure_hc._tcp.local</code>.</p> <p>Classes:</p> <ul> <li> <code>CommandClient</code>           \u2013            <p>Client for sending commands to the Vantage Host Command (HC) service.</p> </li> <li> <code>CommandResponse</code>           \u2013            <p>Wrapper for command responses.</p> </li> <li> <code>Converter</code>           \u2013            <p>Host Command service data conversion functions.</p> </li> <li> <code>EventStream</code>           \u2013            <p>Client to subscribe to events from the Vantage Host Command (HC) service.</p> </li> </ul>"},{"location":"reference/aiovantage/command_client/#aiovantage.command_client.CommandClient","title":"CommandClient","text":"<pre><code>CommandClient(host: str, username: str | None = None, password: str | None = None, *, ssl: SSLContext | bool = True, ssl_context_factory: Callable[[], SSLContext] | None = None, port: int | None = None, conn_timeout: float = 30, read_timeout: float = 60)\n</code></pre> <p>Client for sending commands to the Vantage Host Command (HC) service.</p> <p>Connections are created lazily when needed, and closed when the client is closed, and will automatically reconnect if the connection is lost.</p> <p>Parameters:</p> <ul> <li> <code>host</code>               (<code>str</code>)           \u2013            <p>The hostname or IP address of the Vantage controller.</p> </li> <li> <code>username</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The username to use for authentication.</p> </li> <li> <code>password</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The password to use for authentication.</p> </li> <li> <code>ssl</code>               (<code>SSLContext | bool</code>, default:                   <code>True</code> )           \u2013            <p>The SSL context to use. True will use a default context, False will disable SSL.</p> </li> <li> <code>ssl_context_factory</code>               (<code>Callable[[], SSLContext] | None</code>, default:                   <code>None</code> )           \u2013            <p>A factory function to use when creating default SSL contexts.</p> </li> <li> <code>port</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The port to connect to.</p> </li> <li> <code>conn_timeout</code>               (<code>float</code>, default:                   <code>30</code> )           \u2013            <p>The connection timeout in seconds.</p> </li> <li> <code>read_timeout</code>               (<code>float</code>, default:                   <code>60</code> )           \u2013            <p>The read timeout in seconds.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>close</code>             \u2013              <p>Close the connection to the Host Command service.</p> </li> <li> <code>command</code>             \u2013              <p>Send a command to the Host Command service and wait for a response.</p> </li> <li> <code>raw_request</code>             \u2013              <p>Send a raw command to the Host Command service and return all response lines.</p> </li> </ul>"},{"location":"reference/aiovantage/command_client/#aiovantage.command_client.CommandClient.close","title":"close","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Close the connection to the Host Command service.</p>"},{"location":"reference/aiovantage/command_client/#aiovantage.command_client.CommandClient.command","title":"command  <code>async</code>","text":"<pre><code>command(command: str, *params: Any) -&gt; CommandResponse\n</code></pre> <p>Send a command to the Host Command service and wait for a response.</p> <p>Parameters:</p> <ul> <li> <code>command</code>               (<code>str</code>)           \u2013            <p>The command to send, should be a single word string.</p> </li> <li> <code>params</code>               (<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>The parameters to send with the command.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>CommandResponse</code>           \u2013            <p>A CommandResponse instance.</p> </li> </ul>"},{"location":"reference/aiovantage/command_client/#aiovantage.command_client.CommandClient.raw_request","title":"raw_request  <code>async</code>","text":"<pre><code>raw_request(request: str) -&gt; list[str]\n</code></pre> <p>Send a raw command to the Host Command service and return all response lines.</p> <p>Handles authentication if required, and raises an exception if the response line contains R:ERROR.</p> <p>Parameters:</p> <ul> <li> <code>request</code>               (<code>str</code>)           \u2013            <p>The request to send.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>The response lines received from the server.</p> </li> </ul>"},{"location":"reference/aiovantage/command_client/#aiovantage.command_client.CommandResponse","title":"CommandResponse  <code>dataclass</code>","text":"<pre><code>CommandResponse(command: str, args: list[str], data: list[str])\n</code></pre> <p>Wrapper for command responses.</p> <p>Almost all commands will respond with a single \"response\" line, which contains the command name and any arguments that were returned.</p> <p>Some command, such as the \"HELP\" command, return multiple lines of text before the response line.</p> <p>Attributes:</p> <ul> <li> <code>command</code>               (<code>str</code>)           \u2013            <p>The command that was executed.</p> </li> <li> <code>args</code>               (<code>list[str]</code>)           \u2013            <p>The arguments that were returned on the response line.</p> </li> <li> <code>data</code>               (<code>list[str]</code>)           \u2013            <p>Any additional lines of text returned before the response line.</p> </li> </ul>"},{"location":"reference/aiovantage/command_client/#aiovantage.command_client.CommandResponse.command","title":"command  <code>instance-attribute</code>","text":"<pre><code>command: str\n</code></pre> <p>The command that was executed.</p>"},{"location":"reference/aiovantage/command_client/#aiovantage.command_client.CommandResponse.args","title":"args  <code>instance-attribute</code>","text":"<pre><code>args: list[str]\n</code></pre> <p>The arguments that were returned on the response line.</p>"},{"location":"reference/aiovantage/command_client/#aiovantage.command_client.CommandResponse.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: list[str]\n</code></pre> <p>Any additional lines of text returned before the response line.</p>"},{"location":"reference/aiovantage/command_client/#aiovantage.command_client.Converter","title":"Converter","text":"<p>Host Command service data conversion functions.</p> <p>Methods:</p> <ul> <li> <code>deserialize</code>             \u2013              <p>Deserialize a token from the Host Command service.</p> </li> <li> <code>serialize</code>             \u2013              <p>Serialize an object to a string token for the Host Command service.</p> </li> <li> <code>tokenize</code>             \u2013              <p>Tokenize a response from the Host Command service.</p> </li> </ul>"},{"location":"reference/aiovantage/command_client/#aiovantage.command_client.Converter.deserialize","title":"deserialize  <code>staticmethod</code>","text":"<pre><code>deserialize(data_type: type, value: str, **kwargs: Any) -&gt; Any\n</code></pre> <p>Deserialize a token from the Host Command service.</p> <p>Parameters:</p> <ul> <li> <code>data_type</code>               (<code>type</code>)           \u2013            <p>The data type to deserialize the value to.</p> </li> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>The string data to deserialize.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional deserialization arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>           \u2013            <p>The deserialized object.</p> </li> </ul>"},{"location":"reference/aiovantage/command_client/#aiovantage.command_client.Converter.serialize","title":"serialize  <code>staticmethod</code>","text":"<pre><code>serialize(value: Any, **kwargs: Any) -&gt; str\n</code></pre> <p>Serialize an object to a string token for the Host Command service.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>Any</code>)           \u2013            <p>The value to serialize to a string.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A string representation of the object.</p> </li> </ul>"},{"location":"reference/aiovantage/command_client/#aiovantage.command_client.Converter.tokenize","title":"tokenize  <code>staticmethod</code>","text":"<pre><code>tokenize(string: str) -&gt; list[str]\n</code></pre> <p>Tokenize a response from the Host Command service.</p> <p>Handles quoted strings and byte arrays as single tokens.</p> <p>Parameters:</p> <ul> <li> <code>string</code>               (<code>str</code>)           \u2013            <p>The response string to tokenize.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>A list of string tokens.</p> </li> </ul>"},{"location":"reference/aiovantage/command_client/#aiovantage.command_client.EventStream","title":"EventStream","text":"<pre><code>EventStream(host: str, username: str | None = None, password: str | None = None, *, ssl: SSLContext | bool = True, ssl_context_factory: Callable[[], SSLContext] | None = None, port: int | None = None, conn_timeout: float = 30)\n</code></pre> <p>               Bases: <code>EventDispatcher</code></p> <p>Client to subscribe to events from the Vantage Host Command (HC) service.</p> <p>Parameters:</p> <ul> <li> <code>host</code>               (<code>str</code>)           \u2013            <p>The hostname or IP address of the Vantage controller.</p> </li> <li> <code>username</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The username to use for authentication.</p> </li> <li> <code>password</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The password to use for authentication.</p> </li> <li> <code>ssl</code>               (<code>SSLContext | bool</code>, default:                   <code>True</code> )           \u2013            <p>The SSL context to use. True will use a default context, False will disable SSL.</p> </li> <li> <code>ssl_context_factory</code>               (<code>Callable[[], SSLContext] | None</code>, default:                   <code>None</code> )           \u2013            <p>A factory function to use when creating default SSL contexts.</p> </li> <li> <code>port</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The port to connect to.</p> </li> <li> <code>conn_timeout</code>               (<code>float</code>, default:                   <code>30</code> )           \u2013            <p>The connection timeout in seconds.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>start</code>             \u2013              <p>Initialize the event stream.</p> </li> <li> <code>stop</code>             \u2013              <p>Stop the event stream.</p> </li> <li> <code>subscribe_status</code>             \u2013              <p>Subscribe to \"Status\" events from the Host Command service.</p> </li> <li> <code>subscribe_enhanced_log</code>             \u2013              <p>Subscribe to \"Enhanced Log\" events from the Host Command service.</p> </li> </ul>"},{"location":"reference/aiovantage/command_client/#aiovantage.command_client.EventStream.start","title":"start  <code>async</code>","text":"<pre><code>start() -&gt; CommandConnection\n</code></pre> <p>Initialize the event stream.</p>"},{"location":"reference/aiovantage/command_client/#aiovantage.command_client.EventStream.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop the event stream.</p>"},{"location":"reference/aiovantage/command_client/#aiovantage.command_client.EventStream.subscribe_status","title":"subscribe_status","text":"<pre><code>subscribe_status(callback: Callable[[StatusReceived], None], *categories: str) -&gt; Callable[[], None]\n</code></pre> <p>Subscribe to \"Status\" events from the Host Command service.</p> <p>Parameters:</p> <ul> <li> <code>callback</code>               (<code>Callable[[StatusReceived], None]</code>)           \u2013            <p>The callback to invoke when an event is received.</p> </li> <li> <code>*categories</code>               (<code>str</code>, default:                   <code>()</code> )           \u2013            <p>The status categories to subscribe to events for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable[[], None]</code>           \u2013            <p>A function that can be used to unsubscribe from status events.</p> </li> </ul>"},{"location":"reference/aiovantage/command_client/#aiovantage.command_client.EventStream.subscribe_enhanced_log","title":"subscribe_enhanced_log","text":"<pre><code>subscribe_enhanced_log(callback: Callable[[EnhancedLogReceived], None], *log_types: str) -&gt; Callable[[], None]\n</code></pre> <p>Subscribe to \"Enhanced Log\" events from the Host Command service.</p> <p>Parameters:</p> <ul> <li> <code>callback</code>               (<code>Callable[[EnhancedLogReceived], None]</code>)           \u2013            <p>The callback to invoke when an event is received.</p> </li> <li> <code>log_types</code>               (<code>str</code>, default:                   <code>()</code> )           \u2013            <p>The event log type or types to subscribe to.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable[[], None]</code>           \u2013            <p>A function that can be used to unsubscribe from log events.</p> </li> </ul>"},{"location":"reference/aiovantage/config_client/","title":"aiovantage.config_client","text":""},{"location":"reference/aiovantage/config_client/#aiovantage.config_client","title":"aiovantage.config_client","text":"<p>Client for the Vantage Application Communication Interface (ACI) service.</p> <p>The ACI service is an XML-based RPC service that Design Center uses to communicate with Vantage InFusion Controllers. There are a number of \"interfaces\" exposed, each with one or more \"methods\".</p> <p>This service allows you to query the \"configuration\" of a Vantage system, for example fetching a list of all the objects, getting a backup of the Design Center XML, etc.</p> <p>The service is exposed on port 2010 (SSL) by default, and on port 2001 (non-SSL) if this port has been opened by the firewall on the controller.</p> <p>The service is discoverable via mDNS as <code>_aci._tcp.local</code> and/or <code>_secure_aci._tcp.local</code>.</p> <p>Classes:</p> <ul> <li> <code>ConfigClient</code>           \u2013            <p>Client for the Vantage Application Communication Interface (ACI) service.</p> </li> <li> <code>ConfigurationInterface</code>           \u2013            <p>Wrapper for the <code>IConfiguration</code> RPC interface.</p> </li> <li> <code>IntrospectionInterface</code>           \u2013            <p>Wrapper for the <code>IIntrospection</code> RPC interface.</p> </li> <li> <code>LoginInterface</code>           \u2013            <p>Wrapper for the <code>ILogin</code> RPC interface.</p> </li> </ul>"},{"location":"reference/aiovantage/config_client/#aiovantage.config_client.ConfigClient","title":"ConfigClient","text":"<pre><code>ConfigClient(host: str, username: str | None = None, password: str | None = None, *, ssl: SSLContext | bool = True, ssl_context_factory: Callable[[], SSLContext] | None = None, port: int | None = None, conn_timeout: float = 30, read_timeout: float = 60)\n</code></pre> <p>Client for the Vantage Application Communication Interface (ACI) service.</p> <p>Connections are created lazily when needed, and closed when the client is closed.</p> <p>Parameters:</p> <ul> <li> <code>host</code>               (<code>str</code>)           \u2013            <p>The hostname or IP address of the Vantage controller.</p> </li> <li> <code>username</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The username to use for authentication.</p> </li> <li> <code>password</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The password to use for authentication.</p> </li> <li> <code>ssl</code>               (<code>SSLContext | bool</code>, default:                   <code>True</code> )           \u2013            <p>The SSL context to use. True will use a default context, False will disable SSL.</p> </li> <li> <code>ssl_context_factory</code>               (<code>Callable[[], SSLContext] | None</code>, default:                   <code>None</code> )           \u2013            <p>A factory function to use when creating default SSL contexts.</p> </li> <li> <code>port</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The port to connect to.</p> </li> <li> <code>conn_timeout</code>               (<code>float</code>, default:                   <code>30</code> )           \u2013            <p>The connection timeout in seconds.</p> </li> <li> <code>read_timeout</code>               (<code>float</code>, default:                   <code>60</code> )           \u2013            <p>The read timeout in seconds.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>raw_request</code>             \u2013              <p>Send a raw XML request to the ACI service and return the raw XML response.</p> </li> <li> <code>rpc</code>             \u2013              <p>Call a remote procedure on the ACI service.</p> </li> <li> <code>close</code>             \u2013              <p>Close the connection to the ACI service.</p> </li> </ul>"},{"location":"reference/aiovantage/config_client/#aiovantage.config_client.ConfigClient.raw_request","title":"raw_request  <code>async</code>","text":"<pre><code>raw_request(request: str, separator: str) -&gt; str\n</code></pre> <p>Send a raw XML request to the ACI service and return the raw XML response.</p> <p>Parameters:</p> <ul> <li> <code>request</code>               (<code>str</code>)           \u2013            <p>The raw XML request to send.</p> </li> <li> <code>separator</code>               (<code>str</code>)           \u2013            <p>Read data from the stream until <code>separator</code> is found.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The raw XML response.</p> </li> </ul>"},{"location":"reference/aiovantage/config_client/#aiovantage.config_client.ConfigClient.rpc","title":"rpc  <code>async</code>","text":"<pre><code>rpc(interface_cls: type[Interface], method_cls: type[Method[Call, Return]], params: Call | None = None) -&gt; Return\n</code></pre> <p>Call a remote procedure on the ACI service.</p> <p>Parameters:</p> <ul> <li> <code>interface_cls</code>               (<code>type[Interface]</code>)           \u2013            <p>The interface class.</p> </li> <li> <code>method_cls</code>               (<code>type[Method[Call, Return]]</code>)           \u2013            <p>The method class to call.</p> </li> <li> <code>params</code>               (<code>Call | None</code>, default:                   <code>None</code> )           \u2013            <p>The parameters to pass to the method.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Return</code>           \u2013            <p>The result of the method call.</p> </li> </ul>"},{"location":"reference/aiovantage/config_client/#aiovantage.config_client.ConfigClient.close","title":"close","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Close the connection to the ACI service.</p>"},{"location":"reference/aiovantage/config_client/#aiovantage.config_client.ConfigurationInterface","title":"ConfigurationInterface","text":"<p>Wrapper for the <code>IConfiguration</code> RPC interface.</p> <p>Methods:</p> <ul> <li> <code>open_filter</code>             \u2013              <p>Open a filter for fetching Vantage objects.</p> </li> <li> <code>get_filter_results</code>             \u2013              <p>Get results from a filter handle previously opened with open_filter.</p> </li> <li> <code>close_filter</code>             \u2013              <p>Close a filter handle previously opened with open_filter.</p> </li> <li> <code>get_object</code>             \u2013              <p>Get one or more Vantage objects by their VIDs.</p> </li> <li> <code>get_objects</code>             \u2013              <p>Get Vantage objects, optionally filtered by a type and/or an XPath.</p> </li> </ul>"},{"location":"reference/aiovantage/config_client/#aiovantage.config_client.ConfigurationInterface.open_filter","title":"open_filter  <code>async</code> <code>staticmethod</code>","text":"<pre><code>open_filter(client: ConfigClient, *object_types: str, xpath: str | None = None) -&gt; int\n</code></pre> <p>Open a filter for fetching Vantage objects.</p> <p>Parameters:</p> <ul> <li> <code>client</code>               (<code>ConfigClient</code>)           \u2013            <p>A config client instance</p> </li> <li> <code>*object_types</code>               (<code>str</code>, default:                   <code>()</code> )           \u2013            <p>The type names of the objects to fetch, eg. \"Area\", \"Load\", \"Keypad\"</p> </li> <li> <code>xpath</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional xpath to filter the results by, eg. \"/Load\", \"/*[@VID='12']\"</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The handle of the opened filter</p> </li> </ul>"},{"location":"reference/aiovantage/config_client/#aiovantage.config_client.ConfigurationInterface.get_filter_results","title":"get_filter_results  <code>async</code> <code>staticmethod</code>","text":"<pre><code>get_filter_results(client: ConfigClient, h_filter: int, count: int = 50, whole_object: bool = True) -&gt; list[WrappedObject]\n</code></pre> <p>Get results from a filter handle previously opened with open_filter.</p> <p>Parameters:</p> <ul> <li> <code>client</code>               (<code>ConfigClient</code>)           \u2013            <p>A config client instance</p> </li> <li> <code>h_filter</code>               (<code>int</code>)           \u2013            <p>The handle of the filter to fetch results for</p> </li> <li> <code>count</code>               (<code>int</code>, default:                   <code>50</code> )           \u2013            <p>The maximum number of results to fetch</p> </li> <li> <code>whole_object</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to fetch the whole object or a compact representation</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[WrappedObject]</code>           \u2013            <p>A list of Vantage objects</p> </li> </ul>"},{"location":"reference/aiovantage/config_client/#aiovantage.config_client.ConfigurationInterface.close_filter","title":"close_filter  <code>async</code> <code>staticmethod</code>","text":"<pre><code>close_filter(client: ConfigClient, h_filter: int) -&gt; bool\n</code></pre> <p>Close a filter handle previously opened with open_filter.</p> <p>Parameters:</p> <ul> <li> <code>client</code>               (<code>ConfigClient</code>)           \u2013            <p>A config client instance</p> </li> <li> <code>h_filter</code>               (<code>int</code>)           \u2013            <p>The handle of the filter to close</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True if the filter was closed successfully, False otherwise</p> </li> </ul>"},{"location":"reference/aiovantage/config_client/#aiovantage.config_client.ConfigurationInterface.get_object","title":"get_object  <code>async</code> <code>staticmethod</code>","text":"<pre><code>get_object(client: ConfigClient, *vids: int) -&gt; list[WrappedObject]\n</code></pre> <p>Get one or more Vantage objects by their VIDs.</p> <p>Parameters:</p> <ul> <li> <code>client</code>               (<code>ConfigClient</code>)           \u2013            <p>A config client instance</p> </li> <li> <code>*vids</code>               (<code>int</code>, default:                   <code>()</code> )           \u2013            <p>The VIDs of the objects to fetch</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[WrappedObject]</code>           \u2013            <p>A list of Vantage objects</p> </li> </ul>"},{"location":"reference/aiovantage/config_client/#aiovantage.config_client.ConfigurationInterface.get_objects","title":"get_objects  <code>async</code> <code>staticmethod</code>","text":"<pre><code>get_objects(client: ConfigClient, *types: str, xpath: str | None = None, as_type: type[T]) -&gt; AsyncIterator[T]\n</code></pre><pre><code>get_objects(client: ConfigClient, *types: str, xpath: str | None = None) -&gt; AsyncIterator[Any]\n</code></pre> <pre><code>get_objects(client: ConfigClient, *types: str, xpath: str | None = None, as_type: type[T] | None = None) -&gt; AsyncIterator[T | Any]\n</code></pre> <p>Get Vantage objects, optionally filtered by a type and/or an XPath.</p> <p>This is a convenience function that wraps the open_filter, get_filter_results and close_filter methods.</p> <p>Parameters:</p> <ul> <li> <code>client</code>               (<code>ConfigClient</code>)           \u2013            <p>A config client instance</p> </li> <li> <code>*types</code>               (<code>str</code>, default:                   <code>()</code> )           \u2013            <p>The type names of the objects to fetch, eg. \"Area\", \"Load\", \"Keypad\"</p> </li> <li> <code>xpath</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional xpath to filter the results by, eg. \"/Load\", \"/*[@VID='12']\"</p> </li> <li> <code>as_type</code>               (<code>type[T] | None</code>, default:                   <code>None</code> )           \u2013            <p>The type to verify the objects as</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>AsyncIterator[T | Any]</code>           \u2013            <p>A stream of Vantage objects</p> </li> </ul>"},{"location":"reference/aiovantage/config_client/#aiovantage.config_client.IntrospectionInterface","title":"IntrospectionInterface","text":"<p>Wrapper for the <code>IIntrospection</code> RPC interface.</p> <p>Methods:</p> <ul> <li> <code>get_interfaces</code>             \u2013              <p>Get a list of all interfaces on the device.</p> </li> <li> <code>get_sys_info</code>             \u2013              <p>Get system information.</p> </li> <li> <code>get_types</code>             \u2013              <p>Get a list of all object types on the device.</p> </li> <li> <code>get_version</code>             \u2013              <p>Get the version of the device.</p> </li> </ul>"},{"location":"reference/aiovantage/config_client/#aiovantage.config_client.IntrospectionInterface.get_interfaces","title":"get_interfaces  <code>async</code> <code>staticmethod</code>","text":"<pre><code>get_interfaces(client: ConfigClient) -&gt; list[Interface]\n</code></pre> <p>Get a list of all interfaces on the device.</p> <p>Parameters:</p> <ul> <li> <code>client</code>               (<code>ConfigClient</code>)           \u2013            <p>A config client instance</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Interface]</code>           \u2013            <p>A list of interfaces.</p> </li> </ul>"},{"location":"reference/aiovantage/config_client/#aiovantage.config_client.IntrospectionInterface.get_sys_info","title":"get_sys_info  <code>async</code> <code>staticmethod</code>","text":"<pre><code>get_sys_info(client: ConfigClient) -&gt; SysInfo\n</code></pre> <p>Get system information.</p> <p>Parameters:</p> <ul> <li> <code>client</code>               (<code>ConfigClient</code>)           \u2013            <p>A config client instance</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>SysInfo</code>           \u2013            <p>A system information object.</p> </li> </ul>"},{"location":"reference/aiovantage/config_client/#aiovantage.config_client.IntrospectionInterface.get_types","title":"get_types  <code>async</code> <code>staticmethod</code>","text":"<pre><code>get_types(client: ConfigClient) -&gt; list[Type]\n</code></pre> <p>Get a list of all object types on the device.</p> <p>Parameters:</p> <ul> <li> <code>client</code>               (<code>ConfigClient</code>)           \u2013            <p>A config client instance</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Type]</code>           \u2013            <p>A list of object types.</p> </li> </ul>"},{"location":"reference/aiovantage/config_client/#aiovantage.config_client.IntrospectionInterface.get_version","title":"get_version  <code>async</code> <code>staticmethod</code>","text":"<pre><code>get_version(client: ConfigClient) -&gt; Version\n</code></pre> <p>Get the version of the device.</p> <p>Parameters:</p> <ul> <li> <code>client</code>               (<code>ConfigClient</code>)           \u2013            <p>A config client instance</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Version</code>           \u2013            <p>A version information object.</p> </li> </ul>"},{"location":"reference/aiovantage/config_client/#aiovantage.config_client.LoginInterface","title":"LoginInterface","text":"<p>Wrapper for the <code>ILogin</code> RPC interface.</p> <p>Methods:</p> <ul> <li> <code>login</code>             \u2013              <p>Login to the ACI service.</p> </li> </ul>"},{"location":"reference/aiovantage/config_client/#aiovantage.config_client.LoginInterface.login","title":"login  <code>async</code> <code>staticmethod</code>","text":"<pre><code>login(client: ConfigClient, user: str, password: str) -&gt; bool\n</code></pre> <p>Login to the ACI service.</p> <p>Parameters:</p> <ul> <li> <code>client</code>               (<code>ConfigClient</code>)           \u2013            <p>A config client instance</p> </li> <li> <code>user</code>               (<code>str</code>)           \u2013            <p>The username to login with</p> </li> <li> <code>password</code>               (<code>str</code>)           \u2013            <p>The password to login with</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True if the login was successful, False otherwise</p> </li> </ul>"},{"location":"reference/aiovantage/controllers/","title":"aiovantage.controllers","text":""},{"location":"reference/aiovantage/controllers/#aiovantage.controllers","title":"aiovantage.controllers","text":"<p>Controllers for managing collections of objects from the Vantage system.</p> <p>Controllers are responsible for fetching objects, fetching their state, and keeping the state up to date.</p> <p>Some controllers manage a single type of object, while others handle multiple types. In controllers where multiple object types are managed, they are typically conceptually related through shared behavior rather than a strict class hierarchy. These types of controllers typically hold objects which implement one or more common interfaces. For examples, objects in the <code>BlindsController</code> all implement the <code>BlindInterface</code>.</p> <p>Controllers implement <code>QuerySet</code>, which provides a number of methods for filtering and finding objects, such as <code>filter</code> and <code>get</code>.</p> <p>Controllers also implement <code>EventDispatcher</code>, which allows you to subscribe to events related to the objects managed by the controller with <code>subscribe</code>. The following events are emitted by controllers: <code>ObjectAdded</code>, <code>ObjectUpdated</code>, <code>ObjectDeleted</code></p> <p>An instance of every controller type is made available through the main Vantage object.</p> <p>Classes:</p> <ul> <li> <code>AnemoSensorsController</code>           \u2013            <p>Anemo sensors (wind speed sensors) controller.</p> </li> <li> <code>AreasController</code>           \u2013            <p>Areas controller.</p> </li> <li> <code>BackBoxesController</code>           \u2013            <p>Back boxes controller.</p> </li> <li> <code>Controller</code>           \u2013            <p>Base controller for managing collections of Vantage objects.</p> </li> <li> <code>StatusType</code>           \u2013            <p>The type of status that the controller is using for state monitoring.</p> </li> <li> <code>BlindGroupsController</code>           \u2013            <p>Blind groups controller.</p> </li> <li> <code>BlindsController</code>           \u2013            <p>Blinds controller.</p> </li> <li> <code>ButtonsController</code>           \u2013            <p>Buttons controller.</p> </li> <li> <code>DryContactsController</code>           \u2013            <p>Dry contacts controller.</p> </li> <li> <code>GMemController</code>           \u2013            <p>GMem (variables) controller.</p> </li> <li> <code>LightSensorsController</code>           \u2013            <p>Light sensors controller.</p> </li> <li> <code>LoadGroupsController</code>           \u2013            <p>Load groups controller.</p> </li> <li> <code>LoadsController</code>           \u2013            <p>Loads controller.</p> </li> <li> <code>MastersController</code>           \u2013            <p>Masters (InFusion Controllers) controller.</p> </li> <li> <code>ModulesController</code>           \u2013            <p>Modules controller.</p> </li> <li> <code>OmniSensorsController</code>           \u2013            <p>Omni sensors controller.</p> </li> <li> <code>PortDevicesController</code>           \u2013            <p>Port devices controller.</p> </li> <li> <code>PowerProfilesController</code>           \u2013            <p>Power profiles controller.</p> </li> <li> <code>QuerySet</code>           \u2013            <p>Queryset class for querying objects from a dictionary.</p> </li> <li> <code>RGBLoadsController</code>           \u2013            <p>RGB loads controller.</p> </li> <li> <code>StationsController</code>           \u2013            <p>Stations controller.</p> </li> <li> <code>TasksController</code>           \u2013            <p>Tasks controller.</p> </li> <li> <code>TemperaturesController</code>           \u2013            <p>Temperature device controller.</p> </li> <li> <code>ThermostatsController</code>           \u2013            <p>Thermostats controller.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>BlindGroupTypes</code>           \u2013            <p>Types managed by the blind groups controller.</p> </li> <li> <code>BlindTypes</code>           \u2013            <p>Types managed by the blinds controller.</p> </li> <li> <code>RGBLoadTypes</code>           \u2013            <p>Types managed by the RGB loads controller.</p> </li> <li> <code>ThermostatTypes</code>           \u2013            <p>Types managed by the thermostats controller.</p> </li> </ul>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.BlindGroupTypes","title":"BlindGroupTypes  <code>module-attribute</code>","text":"<pre><code>BlindGroupTypes = BlindGroup | SomfyRS485GroupChild | SomfyURTSI2GroupChild\n</code></pre> <p>Types managed by the blind groups controller.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.BlindTypes","title":"BlindTypes  <code>module-attribute</code>","text":"<pre><code>BlindTypes = QISBlind | QubeBlind | RelayBlind | SomfyRS485ShadeChild | SomfyURTSI2ShadeChild\n</code></pre> <p>Types managed by the blinds controller.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.RGBLoadTypes","title":"RGBLoadTypes  <code>module-attribute</code>","text":"<pre><code>RGBLoadTypes = VantageDDGColorLoad | VantageDGColorLoad\n</code></pre> <p>Types managed by the RGB loads controller.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.ThermostatTypes","title":"ThermostatTypes  <code>module-attribute</code>","text":"<pre><code>ThermostatTypes = Thermostat | VantageGenericHVACRS485ZoneChild | VantageGenericHVACRS485ZoneWithoutFanSpeedChild | VantageHVACIUZoneChild | VantageVirtualThermostatPort\n</code></pre> <p>Types managed by the thermostats controller.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.AnemoSensorsController","title":"AnemoSensorsController","text":"<pre><code>AnemoSensorsController(vantage: Vantage)\n</code></pre> <p>               Bases: <code>Controller[AnemoSensor]</code></p> <p>Anemo sensors (wind speed sensors) controller.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.AreasController","title":"AreasController","text":"<pre><code>AreasController(vantage: Vantage)\n</code></pre> <p>               Bases: <code>Controller[Area]</code></p> <p>Areas controller.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.BackBoxesController","title":"BackBoxesController","text":"<pre><code>BackBoxesController(vantage: Vantage)\n</code></pre> <p>               Bases: <code>Controller[BackBox]</code></p> <p>Back boxes controller.</p> <p>Back boxes typically represent a \"gang box\" in a wall which may contain multiple stations, dimmers, etc. It is mostly useful to know about these devices so we can set up a proper device hierarchy.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.Controller","title":"Controller","text":"<pre><code>Controller(vantage: Vantage)\n</code></pre> <p>               Bases: <code>QuerySet[T]</code>, <code>EventDispatcher</code></p> <p>Base controller for managing collections of Vantage objects.</p> <p>Parameters:</p> <ul> <li> <code>vantage</code>               (<code>Vantage</code>)           \u2013            <p>The Vantage instance.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>initialize</code>             \u2013              <p>Populate the controller, and optionally fetch object state.</p> </li> <li> <code>fetch_state</code>             \u2013              <p>Fetch the state properties of all objects managed by this controller.</p> </li> <li> <code>enable_state_monitoring</code>             \u2013              <p>Monitor for state changes on objects managed by this controller.</p> </li> <li> <code>disable_state_monitoring</code>             \u2013              <p>Stop monitoring for state changes on objects managed by this controller.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>vantage_types</code>               (<code>tuple[str, ...]</code>)           \u2013            <p>The Vantage object types that this controller will fetch.</p> </li> <li> <code>force_category_status</code>               (<code>bool</code>)           \u2013            <p>Whether to force the controller to handle 'STATUS' categories.</p> </li> <li> <code>status_type</code>               (<code>StatusType | None</code>)           \u2013            <p>Return the type of status event that the controller is monitoring.</p> </li> </ul>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.Controller.vantage_types","title":"vantage_types  <code>instance-attribute</code>","text":"<pre><code>vantage_types: tuple[str, ...]\n</code></pre> <p>The Vantage object types that this controller will fetch.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.Controller.force_category_status","title":"force_category_status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>force_category_status: bool = False\n</code></pre> <p>Whether to force the controller to handle 'STATUS' categories.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.Controller.status_type","title":"status_type  <code>property</code>","text":"<pre><code>status_type: StatusType | None\n</code></pre> <p>Return the type of status event that the controller is monitoring.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.Controller.initialize","title":"initialize  <code>async</code>","text":"<pre><code>initialize(*, fetch_state: bool = True, enable_state_monitoring: bool = True) -&gt; None\n</code></pre> <p>Populate the controller, and optionally fetch object state.</p> <p>Parameters:</p> <ul> <li> <code>fetch_state</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to fetch the state properties of objects.</p> </li> <li> <code>enable_state_monitoring</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to monitor for state changes on objects.</p> </li> </ul>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.Controller.fetch_state","title":"fetch_state  <code>async</code>","text":"<pre><code>fetch_state() -&gt; None\n</code></pre> <p>Fetch the state properties of all objects managed by this controller.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.Controller.enable_state_monitoring","title":"enable_state_monitoring  <code>async</code>","text":"<pre><code>enable_state_monitoring() -&gt; None\n</code></pre> <p>Monitor for state changes on objects managed by this controller.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.Controller.disable_state_monitoring","title":"disable_state_monitoring  <code>async</code>","text":"<pre><code>disable_state_monitoring() -&gt; None\n</code></pre> <p>Stop monitoring for state changes on objects managed by this controller.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.StatusType","title":"StatusType","text":"<p>               Bases: <code>Enum</code></p> <p>The type of status that the controller is using for state monitoring.</p> <p>Attributes:</p> <ul> <li> <code>OBJECT</code>           \u2013            <p>Object status events from the Enhanced Log.</p> </li> <li> <code>CATEGORY</code>           \u2013            <p>Category status events, eg: S:LOAD, S:BLIND, etc.</p> </li> </ul>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.StatusType.OBJECT","title":"OBJECT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OBJECT = 1\n</code></pre> <p>Object status events from the Enhanced Log.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.StatusType.CATEGORY","title":"CATEGORY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CATEGORY = 2\n</code></pre> <p>Category status events, eg: S:LOAD, S:BLIND, etc.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.BlindGroupsController","title":"BlindGroupsController","text":"<pre><code>BlindGroupsController(vantage: Vantage)\n</code></pre> <p>               Bases: <code>Controller[BlindGroupTypes]</code></p> <p>Blind groups controller.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.BlindsController","title":"BlindsController","text":"<pre><code>BlindsController(vantage: Vantage)\n</code></pre> <p>               Bases: <code>Controller[BlindTypes]</code></p> <p>Blinds controller.</p> <p>Methods:</p> <ul> <li> <code>in_blind_group</code>             \u2013              <p>Return a queryset of all loads in the given blind group.</p> </li> </ul>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.BlindsController.in_blind_group","title":"in_blind_group","text":"<pre><code>in_blind_group(blind_group: BlindGroup) -&gt; QuerySet[BlindTypes]\n</code></pre> <p>Return a queryset of all loads in the given blind group.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.ButtonsController","title":"ButtonsController","text":"<pre><code>ButtonsController(vantage: Vantage)\n</code></pre> <p>               Bases: <code>Controller[Button]</code></p> <p>Buttons controller.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.DryContactsController","title":"DryContactsController","text":"<pre><code>DryContactsController(vantage: Vantage)\n</code></pre> <p>               Bases: <code>Controller[DryContact]</code></p> <p>Dry contacts controller.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.GMemController","title":"GMemController","text":"<pre><code>GMemController(vantage: Vantage)\n</code></pre> <p>               Bases: <code>Controller[GMem]</code></p> <p>GMem (variables) controller.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.LightSensorsController","title":"LightSensorsController","text":"<pre><code>LightSensorsController(vantage: Vantage)\n</code></pre> <p>               Bases: <code>Controller[LightSensor]</code></p> <p>Light sensors controller.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.LoadGroupsController","title":"LoadGroupsController","text":"<pre><code>LoadGroupsController(vantage: Vantage)\n</code></pre> <p>               Bases: <code>Controller[LoadGroup]</code></p> <p>Load groups controller.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.LoadsController","title":"LoadsController","text":"<pre><code>LoadsController(vantage: Vantage)\n</code></pre> <p>               Bases: <code>Controller[Load]</code></p> <p>Loads controller.</p> <p>Methods:</p> <ul> <li> <code>in_load_group</code>             \u2013              <p>Return a queryset of all loads in the given load group.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>on</code>               (<code>QuerySet[Load]</code>)           \u2013            <p>Return a queryset of all loads that are turned on.</p> </li> <li> <code>off</code>               (<code>QuerySet[Load]</code>)           \u2013            <p>Return a queryset of all loads that are turned off.</p> </li> <li> <code>relays</code>               (<code>QuerySet[Load]</code>)           \u2013            <p>Return a queryset of all loads that are relays.</p> </li> <li> <code>motors</code>               (<code>QuerySet[Load]</code>)           \u2013            <p>Return a queryset of all loads that are motors.</p> </li> <li> <code>lights</code>               (<code>QuerySet[Load]</code>)           \u2013            <p>Return a queryset of all loads that are lights.</p> </li> </ul>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.LoadsController.on","title":"on  <code>property</code>","text":"<pre><code>on: QuerySet[Load]\n</code></pre> <p>Return a queryset of all loads that are turned on.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.LoadsController.off","title":"off  <code>property</code>","text":"<pre><code>off: QuerySet[Load]\n</code></pre> <p>Return a queryset of all loads that are turned off.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.LoadsController.relays","title":"relays  <code>property</code>","text":"<pre><code>relays: QuerySet[Load]\n</code></pre> <p>Return a queryset of all loads that are relays.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.LoadsController.motors","title":"motors  <code>property</code>","text":"<pre><code>motors: QuerySet[Load]\n</code></pre> <p>Return a queryset of all loads that are motors.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.LoadsController.lights","title":"lights  <code>property</code>","text":"<pre><code>lights: QuerySet[Load]\n</code></pre> <p>Return a queryset of all loads that are lights.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.LoadsController.in_load_group","title":"in_load_group","text":"<pre><code>in_load_group(load_group: LoadGroup) -&gt; QuerySet[Load]\n</code></pre> <p>Return a queryset of all loads in the given load group.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.MastersController","title":"MastersController","text":"<pre><code>MastersController(vantage: Vantage)\n</code></pre> <p>               Bases: <code>Controller[Master]</code></p> <p>Masters (InFusion Controllers) controller.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.ModulesController","title":"ModulesController","text":"<pre><code>ModulesController(vantage: Vantage)\n</code></pre> <p>               Bases: <code>Controller[SystemObject]</code></p> <p>Modules controller.</p> <p>Modules are relay or dimming modules connected to the Vantage system.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.OmniSensorsController","title":"OmniSensorsController","text":"<pre><code>OmniSensorsController(vantage: Vantage)\n</code></pre> <p>               Bases: <code>Controller[OmniSensor]</code></p> <p>Omni sensors controller.</p> <p>Omni sensors are generic sensors objects which specify which methods to use when getting or setting data in their object definition, as well as the type of data and a conversion formula.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.PortDevicesController","title":"PortDevicesController","text":"<pre><code>PortDevicesController(vantage: Vantage)\n</code></pre> <p>               Bases: <code>Controller[PortDevice]</code></p> <p>Port devices controller.</p> <p>Port devices are typically \"hubs\" that communicate with other devices such as blinds or lighting systems. It is mostly useful to know about these devices so we can set up a proper device hierarchy.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.PowerProfilesController","title":"PowerProfilesController","text":"<pre><code>PowerProfilesController(vantage: Vantage)\n</code></pre> <p>               Bases: <code>Controller[PowerProfile]</code></p> <p>Power profiles controller.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.QuerySet","title":"QuerySet","text":"<pre><code>QuerySet(data: dict[int, T], populate: Callable[[], Awaitable[None]], filters: list[Callable[[T], Any]] | None = None)\n</code></pre> <p>               Bases: <code>Iterable[T]</code>, <code>AsyncIterator[T]</code></p> <p>Queryset class for querying objects from a dictionary.</p> <p>Querysets are iterable and async iterable, and can be chained together to filter objects.</p> <p>Parameters:</p> <ul> <li> <code>data</code>               (<code>dict[int, T]</code>)           \u2013            <p>The data dictionary to query.</p> </li> <li> <code>populate</code>               (<code>Callable[[], Awaitable[None]]</code>)           \u2013            <p>A coroutine to populate the data so we don't have a complete       dataset before using \"async for\" loops.</p> </li> <li> <code>filters</code>               (<code>list[Callable[[T], Any]] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of filters to apply to the queryset.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>filter</code>             \u2013              <p>Return a queryset of objects that match the given filter.</p> </li> <li> <code>get</code>             \u2013              <p>Get the first object that matches the given filter.</p> </li> <li> <code>aget</code>             \u2013              <p>Asynchronously get the first object that matches the given filter.</p> </li> <li> <code>first</code>             \u2013              <p>Return the first object in the queryset.</p> </li> <li> <code>afirst</code>             \u2013              <p>Asynchronously return the first object in the queryset.</p> </li> </ul>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.QuerySet.filter","title":"filter","text":"<pre><code>filter(match: Callable[[T], Any]) -&gt; QuerySet[T]\n</code></pre><pre><code>filter(**kwargs: Any) -&gt; QuerySet[T]\n</code></pre> <pre><code>filter(*args: Any, **kwargs: Any) -&gt; QuerySet[T]\n</code></pre> <p>Return a queryset of objects that match the given filter.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.QuerySet.get","title":"get","text":"<pre><code>get(key: int) -&gt; T | None\n</code></pre><pre><code>get(match: Callable[[T], Any]) -&gt; T | None\n</code></pre><pre><code>get(**kwargs: Any) -&gt; T | None\n</code></pre> <pre><code>get(*args: Any, **kwargs: Any) -&gt; T | None\n</code></pre> <p>Get the first object that matches the given filter.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.QuerySet.aget","title":"aget  <code>async</code>","text":"<pre><code>aget(key: int) -&gt; T | None\n</code></pre><pre><code>aget(match: Callable[[T], Any]) -&gt; T | None\n</code></pre><pre><code>aget(**kwargs: Any) -&gt; T | None\n</code></pre> <pre><code>aget(*args: Any, **kwargs: Any) -&gt; T | None\n</code></pre> <p>Asynchronously get the first object that matches the given filter.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.QuerySet.first","title":"first","text":"<pre><code>first() -&gt; T | None\n</code></pre> <p>Return the first object in the queryset.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.QuerySet.afirst","title":"afirst  <code>async</code>","text":"<pre><code>afirst() -&gt; T | None\n</code></pre> <p>Asynchronously return the first object in the queryset.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.RGBLoadsController","title":"RGBLoadsController","text":"<pre><code>RGBLoadsController(vantage: Vantage)\n</code></pre> <p>               Bases: <code>Controller[RGBLoadTypes]</code></p> <p>RGB loads controller.</p> <p>Attributes:</p> <ul> <li> <code>on</code>               (<code>QuerySet[RGBLoadTypes]</code>)           \u2013            <p>Return a queryset of all RGB loads that are turned on.</p> </li> <li> <code>off</code>               (<code>QuerySet[RGBLoadTypes]</code>)           \u2013            <p>Return a queryset of all RGB loads that are turned off.</p> </li> </ul>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.RGBLoadsController.on","title":"on  <code>property</code>","text":"<pre><code>on: QuerySet[RGBLoadTypes]\n</code></pre> <p>Return a queryset of all RGB loads that are turned on.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.RGBLoadsController.off","title":"off  <code>property</code>","text":"<pre><code>off: QuerySet[RGBLoadTypes]\n</code></pre> <p>Return a queryset of all RGB loads that are turned off.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.StationsController","title":"StationsController","text":"<pre><code>StationsController(vantage: Vantage)\n</code></pre> <p>               Bases: <code>Controller[StationObject]</code></p> <p>Stations controller.</p> <p>Stations typically represent keypads or remote relays. It is mostly useful to know about these devices so we can set up a proper device hierarchy.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.TasksController","title":"TasksController","text":"<pre><code>TasksController(vantage: Vantage)\n</code></pre> <p>               Bases: <code>Controller[Task]</code></p> <p>Tasks controller.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.TemperaturesController","title":"TemperaturesController","text":"<pre><code>TemperaturesController(vantage: Vantage)\n</code></pre> <p>               Bases: <code>Controller[Temperature]</code></p> <p>Temperature device controller.</p> <p>Temperature devices are device that measure or control temperature.</p>"},{"location":"reference/aiovantage/controllers/#aiovantage.controllers.ThermostatsController","title":"ThermostatsController","text":"<pre><code>ThermostatsController(vantage: Vantage)\n</code></pre> <p>               Bases: <code>Controller[ThermostatTypes]</code></p> <p>Thermostats controller.</p>"},{"location":"reference/aiovantage/discovery/","title":"aiovantage.discovery","text":""},{"location":"reference/aiovantage/discovery/#aiovantage.discovery","title":"aiovantage.discovery","text":"<p>Helper functions for discovering details about Vantage controllers.</p> <p>Classes:</p> <ul> <li> <code>VantageControllerDetails</code>           \u2013            <p>Details about a queried Vantage controller.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_controller_details</code>             \u2013              <p>Discover Vantage controller details from given hostname/ip.</p> </li> <li> <code>validate_credentials</code>             \u2013              <p>Check if the given credentials are valid for the given controller.</p> </li> <li> <code>get_serial_from_controller</code>             \u2013              <p>Get the serial number of the given controller.</p> </li> <li> <code>get_serial_from_hostname</code>             \u2013              <p>Get the serial number from a Vantage mDNS hostname.</p> </li> </ul>"},{"location":"reference/aiovantage/discovery/#aiovantage.discovery.VantageControllerDetails","title":"VantageControllerDetails  <code>dataclass</code>","text":"<pre><code>VantageControllerDetails(host: str, supports_ssl: bool, requires_auth: bool)\n</code></pre> <p>Details about a queried Vantage controller.</p>"},{"location":"reference/aiovantage/discovery/#aiovantage.discovery.get_controller_details","title":"get_controller_details  <code>async</code>","text":"<pre><code>get_controller_details(host: str, ssl_context_factory: Callable[[], SSLContext] | None = None) -&gt; VantageControllerDetails | None\n</code></pre> <p>Discover Vantage controller details from given hostname/ip.</p> <p>Parameters:</p> <ul> <li> <code>host</code>               (<code>str</code>)           \u2013            <p>The hostname/ip of a Vantage controller.</p> </li> <li> <code>ssl_context_factory</code>               (<code>Callable[[], SSLContext] | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional function to create an SSLContext.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>VantageControllerDetails | None</code>           \u2013            <p>A DiscoveredVantageController, or None if a controller could not be reached.</p> </li> </ul>"},{"location":"reference/aiovantage/discovery/#aiovantage.discovery.validate_credentials","title":"validate_credentials  <code>async</code>","text":"<pre><code>validate_credentials(host: str, username: str, password: str, *, ssl: SSLContext | bool = True, ssl_context_factory: Callable[[], SSLContext] | None = None) -&gt; bool\n</code></pre> <p>Check if the given credentials are valid for the given controller.</p> <p>Parameters:</p> <ul> <li> <code>host</code>               (<code>str</code>)           \u2013            <p>The hostname/ip of the Vantage controller.</p> </li> <li> <code>ssl</code>               (<code>SSLContext | bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to use SSL when connecting to the controller.</p> </li> <li> <code>username</code>               (<code>str</code>)           \u2013            <p>The username to check.</p> </li> <li> <code>password</code>               (<code>str</code>)           \u2013            <p>The password to check.</p> </li> <li> <code>ssl_context_factory</code>               (<code>Callable[[], SSLContext] | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional function to create an SSLContext.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True if the credentials are valid, False otherwise.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ClientConnectionError</code>             \u2013            <p>If a controller could not be reached.</p> </li> </ul>"},{"location":"reference/aiovantage/discovery/#aiovantage.discovery.get_serial_from_controller","title":"get_serial_from_controller  <code>async</code>","text":"<pre><code>get_serial_from_controller(host: str, username: str | None = None, password: str | None = None, *, ssl: SSLContext | bool = True, ssl_context_factory: Callable[[], SSLContext] | None = None) -&gt; int | None\n</code></pre> <p>Get the serial number of the given controller.</p> <p>Parameters:</p> <ul> <li> <code>host</code>               (<code>str</code>)           \u2013            <p>The hostname/ip of the Vantage controller.</p> </li> <li> <code>username</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The username to check, or None if not required.</p> </li> <li> <code>password</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The password to check, or None if not required.</p> </li> <li> <code>ssl</code>               (<code>SSLContext | bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to use SSL when connecting to the controller.</p> </li> <li> <code>ssl_context_factory</code>               (<code>Callable[[], SSLContext] | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional function to create an SSLContext.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int | None</code>           \u2013            <p>The serial number of the controller, or None if not found.</p> </li> </ul>"},{"location":"reference/aiovantage/discovery/#aiovantage.discovery.get_serial_from_hostname","title":"get_serial_from_hostname","text":"<pre><code>get_serial_from_hostname(hostname: str) -&gt; str | None\n</code></pre> <p>Get the serial number from a Vantage mDNS hostname.</p> <p>Parameters:</p> <ul> <li> <code>hostname</code>               (<code>str</code>)           \u2013            <p>The hostname to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The serial number of the controller, or None if not found.</p> </li> </ul>"},{"location":"reference/aiovantage/errors/","title":"aiovantage.errors","text":""},{"location":"reference/aiovantage/errors/#aiovantage.errors","title":"aiovantage.errors","text":"<p>Client exceptions.</p> <p>Classes:</p> <ul> <li> <code>ClientError</code>           \u2013            <p>Base exception for clients.</p> </li> <li> <code>ClientConnectionError</code>           \u2013            <p>Exception for client connection errors.</p> </li> <li> <code>ClientTimeoutError</code>           \u2013            <p>Exception for client connection errors caused by timeouts.</p> </li> <li> <code>ClientResponseError</code>           \u2013            <p>Exception for client response errors.</p> </li> <li> <code>CommandError</code>           \u2013            <p>Base exception for errors caused by sending commands or requests.</p> </li> <li> <code>InvalidParameterError</code>           \u2013            <p>An invalid parameter was provided.</p> </li> <li> <code>WrongNumberOfParametersError</code>           \u2013            <p>The wrong number of parameters was provided.</p> </li> <li> <code>SyntaxError</code>           \u2013            <p>The command syntax is invalid.</p> </li> <li> <code>InvalidObjectError</code>           \u2013            <p>The requested object ID is invalid.</p> </li> <li> <code>NotImplementedError</code>           \u2013            <p>The requested command is not implemented.</p> </li> <li> <code>FailedError</code>           \u2013            <p>The requested command failed.</p> </li> <li> <code>NotConfiguredError</code>           \u2013            <p>The requested object is not configured.</p> </li> <li> <code>NotInitializedError</code>           \u2013            <p>The requested object is not initialized.</p> </li> <li> <code>NotSupportedError</code>           \u2013            <p>The requested command is not supported.</p> </li> <li> <code>ObjectOfflineError</code>           \u2013            <p>The requested object is offline.</p> </li> <li> <code>LoginRequiredError</code>           \u2013            <p>Login is required to perform this command.</p> </li> <li> <code>LoginFailedError</code>           \u2013            <p>Login failed.</p> </li> <li> <code>ConversionError</code>           \u2013            <p>Error during data serialization/deserialization.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>raise_command_error</code>             \u2013              <p>Raise a command error based on the error code.</p> </li> </ul>"},{"location":"reference/aiovantage/errors/#aiovantage.errors.ClientError","title":"ClientError","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for clients.</p>"},{"location":"reference/aiovantage/errors/#aiovantage.errors.ClientConnectionError","title":"ClientConnectionError","text":"<p>               Bases: <code>ClientError</code></p> <p>Exception for client connection errors.</p>"},{"location":"reference/aiovantage/errors/#aiovantage.errors.ClientTimeoutError","title":"ClientTimeoutError","text":"<p>               Bases: <code>TimeoutError</code>, <code>ClientConnectionError</code></p> <p>Exception for client connection errors caused by timeouts.</p>"},{"location":"reference/aiovantage/errors/#aiovantage.errors.ClientResponseError","title":"ClientResponseError","text":"<p>               Bases: <code>ClientError</code></p> <p>Exception for client response errors.</p>"},{"location":"reference/aiovantage/errors/#aiovantage.errors.CommandError","title":"CommandError","text":"<p>               Bases: <code>ClientError</code></p> <p>Base exception for errors caused by sending commands or requests.</p>"},{"location":"reference/aiovantage/errors/#aiovantage.errors.InvalidParameterError","title":"InvalidParameterError","text":"<p>               Bases: <code>CommandError</code></p> <p>An invalid parameter was provided.</p>"},{"location":"reference/aiovantage/errors/#aiovantage.errors.WrongNumberOfParametersError","title":"WrongNumberOfParametersError","text":"<p>               Bases: <code>CommandError</code></p> <p>The wrong number of parameters was provided.</p>"},{"location":"reference/aiovantage/errors/#aiovantage.errors.SyntaxError","title":"SyntaxError","text":"<p>               Bases: <code>CommandError</code></p> <p>The command syntax is invalid.</p>"},{"location":"reference/aiovantage/errors/#aiovantage.errors.InvalidObjectError","title":"InvalidObjectError","text":"<p>               Bases: <code>CommandError</code></p> <p>The requested object ID is invalid.</p>"},{"location":"reference/aiovantage/errors/#aiovantage.errors.NotImplementedError","title":"NotImplementedError","text":"<p>               Bases: <code>CommandError</code></p> <p>The requested command is not implemented.</p>"},{"location":"reference/aiovantage/errors/#aiovantage.errors.FailedError","title":"FailedError","text":"<p>               Bases: <code>CommandError</code></p> <p>The requested command failed.</p>"},{"location":"reference/aiovantage/errors/#aiovantage.errors.NotConfiguredError","title":"NotConfiguredError","text":"<p>               Bases: <code>CommandError</code></p> <p>The requested object is not configured.</p>"},{"location":"reference/aiovantage/errors/#aiovantage.errors.NotInitializedError","title":"NotInitializedError","text":"<p>               Bases: <code>CommandError</code></p> <p>The requested object is not initialized.</p>"},{"location":"reference/aiovantage/errors/#aiovantage.errors.NotSupportedError","title":"NotSupportedError","text":"<p>               Bases: <code>CommandError</code></p> <p>The requested command is not supported.</p>"},{"location":"reference/aiovantage/errors/#aiovantage.errors.ObjectOfflineError","title":"ObjectOfflineError","text":"<p>               Bases: <code>CommandError</code></p> <p>The requested object is offline.</p>"},{"location":"reference/aiovantage/errors/#aiovantage.errors.LoginRequiredError","title":"LoginRequiredError","text":"<p>               Bases: <code>CommandError</code></p> <p>Login is required to perform this command.</p>"},{"location":"reference/aiovantage/errors/#aiovantage.errors.LoginFailedError","title":"LoginFailedError","text":"<p>               Bases: <code>CommandError</code></p> <p>Login failed.</p>"},{"location":"reference/aiovantage/errors/#aiovantage.errors.ConversionError","title":"ConversionError","text":"<p>               Bases: <code>Exception</code></p> <p>Error during data serialization/deserialization.</p>"},{"location":"reference/aiovantage/errors/#aiovantage.errors.raise_command_error","title":"raise_command_error","text":"<pre><code>raise_command_error(code: int, message: str) -&gt; None\n</code></pre> <p>Raise a command error based on the error code.</p>"},{"location":"reference/aiovantage/events/","title":"aiovantage.events","text":""},{"location":"reference/aiovantage/events/#aiovantage.events","title":"aiovantage.events","text":"<p>Event classes for Vantage controller events.</p> <p>Classes:</p> <ul> <li> <code>Connected</code>           \u2013            <p>Event emitted when a client connection is established.</p> </li> <li> <code>Disconnected</code>           \u2013            <p>Event emitted when the client connection is lost.</p> </li> <li> <code>Reconnected</code>           \u2013            <p>Event emitted when the client connection is re-established.</p> </li> <li> <code>StatusReceived</code>           \u2013            <p>Event emitted when a \"S:\" status is received.</p> </li> <li> <code>EnhancedLogReceived</code>           \u2013            <p>Event emitted when an \"EL:\" enhanced log is received.</p> </li> <li> <code>ObjectAdded</code>           \u2013            <p>Event emitted when an object is added to a controller.</p> </li> <li> <code>ObjectUpdated</code>           \u2013            <p>Event emitted when an object is updated.</p> </li> <li> <code>ObjectDeleted</code>           \u2013            <p>Event emitted when an object is removed from a controller.</p> </li> </ul>"},{"location":"reference/aiovantage/events/#aiovantage.events.EventDispatcher","title":"EventDispatcher","text":"<pre><code>EventDispatcher()\n</code></pre> <p>Simple event dispatcher that allows subscription to and emission of events.</p> <p>Methods:</p> <ul> <li> <code>subscribe</code>             \u2013              <p>Register a callback function to be called when an event is emitted.</p> </li> <li> <code>emit</code>             \u2013              <p>Emit an event, notifying all subscribers.</p> </li> </ul>"},{"location":"reference/aiovantage/events/#aiovantage.events.EventDispatcher.subscribe","title":"subscribe","text":"<pre><code>subscribe(event_type: type[T], callback: Callable[[T], None]) -&gt; Callable[[], None]\n</code></pre> <p>Register a callback function to be called when an event is emitted.</p> <p>Parameters:</p> <ul> <li> <code>event_type</code>               (<code>type[T]</code>)           \u2013            <p>Event type to subscribe to.</p> </li> <li> <code>callback</code>               (<code>Callable[[T], None]</code>)           \u2013            <p>Callback function to call when an event of this type is emitted.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable[[], None]</code>           \u2013            <p>A function that can be called to unsubscribe from the event.</p> </li> </ul>"},{"location":"reference/aiovantage/events/#aiovantage.events.EventDispatcher.emit","title":"emit","text":"<pre><code>emit(event: Any) -&gt; None\n</code></pre> <p>Emit an event, notifying all subscribers.</p> <p>Parameters:</p> <ul> <li> <code>event</code>               (<code>Any</code>)           \u2013            <p>The event to emit.</p> </li> </ul>"},{"location":"reference/aiovantage/events/#aiovantage.events.Connected","title":"Connected","text":"<p>Event emitted when a client connection is established.</p>"},{"location":"reference/aiovantage/events/#aiovantage.events.Disconnected","title":"Disconnected","text":"<p>Event emitted when the client connection is lost.</p>"},{"location":"reference/aiovantage/events/#aiovantage.events.Reconnected","title":"Reconnected","text":"<p>Event emitted when the client connection is re-established.</p>"},{"location":"reference/aiovantage/events/#aiovantage.events.StatusReceived","title":"StatusReceived  <code>dataclass</code>","text":"<pre><code>StatusReceived(category: str, vid: int, args: list[str])\n</code></pre> <p>Event emitted when a \"S:\" status is received.</p> <p>Attributes:</p> <ul> <li> <code>category</code>               (<code>str</code>)           \u2013            <p>The status category, eg. \"LOAD\", \"BLIND\", etc.</p> </li> <li> <code>vid</code>               (<code>int</code>)           \u2013            <p>The unique Vantage ID of the object the status applies to.</p> </li> <li> <code>args</code>               (<code>list[str]</code>)           \u2013            <p>The arguments of the status message.</p> </li> </ul>"},{"location":"reference/aiovantage/events/#aiovantage.events.StatusReceived.category","title":"category  <code>instance-attribute</code>","text":"<pre><code>category: str\n</code></pre> <p>The status category, eg. \"LOAD\", \"BLIND\", etc.</p>"},{"location":"reference/aiovantage/events/#aiovantage.events.StatusReceived.vid","title":"vid  <code>instance-attribute</code>","text":"<pre><code>vid: int\n</code></pre> <p>The unique Vantage ID of the object the status applies to.</p>"},{"location":"reference/aiovantage/events/#aiovantage.events.StatusReceived.args","title":"args  <code>instance-attribute</code>","text":"<pre><code>args: list[str]\n</code></pre> <p>The arguments of the status message.</p>"},{"location":"reference/aiovantage/events/#aiovantage.events.EnhancedLogReceived","title":"EnhancedLogReceived  <code>dataclass</code>","text":"<pre><code>EnhancedLogReceived(log: str)\n</code></pre> <p>Event emitted when an \"EL:\" enhanced log is received.</p> <p>Attributes:</p> <ul> <li> <code>log</code>               (<code>str</code>)           \u2013            <p>The enhanced log message.</p> </li> </ul>"},{"location":"reference/aiovantage/events/#aiovantage.events.EnhancedLogReceived.log","title":"log  <code>instance-attribute</code>","text":"<pre><code>log: str\n</code></pre> <p>The enhanced log message.</p>"},{"location":"reference/aiovantage/events/#aiovantage.events.ObjectAdded","title":"ObjectAdded  <code>dataclass</code>","text":"<pre><code>ObjectAdded(obj: T)\n</code></pre> <p>               Bases: <code>Generic[T]</code></p> <p>Event emitted when an object is added to a controller.</p> <p>Attributes:</p> <ul> <li> <code>obj</code>               (<code>T</code>)           \u2013            <p>The object that the event is related to.</p> </li> </ul>"},{"location":"reference/aiovantage/events/#aiovantage.events.ObjectAdded.obj","title":"obj  <code>instance-attribute</code>","text":"<pre><code>obj: T\n</code></pre> <p>The object that the event is related to.</p>"},{"location":"reference/aiovantage/events/#aiovantage.events.ObjectUpdated","title":"ObjectUpdated  <code>dataclass</code>","text":"<pre><code>ObjectUpdated(obj: T, attrs_changed: list[str])\n</code></pre> <p>               Bases: <code>Generic[T]</code></p> <p>Event emitted when an object is updated.</p> <p>Attributes:</p> <ul> <li> <code>obj</code>               (<code>T</code>)           \u2013            <p>The object that the event is related to.</p> </li> <li> <code>attrs_changed</code>               (<code>list[str]</code>)           \u2013            <p>A list of attributes that have changed.</p> </li> </ul>"},{"location":"reference/aiovantage/events/#aiovantage.events.ObjectUpdated.obj","title":"obj  <code>instance-attribute</code>","text":"<pre><code>obj: T\n</code></pre> <p>The object that the event is related to.</p>"},{"location":"reference/aiovantage/events/#aiovantage.events.ObjectUpdated.attrs_changed","title":"attrs_changed  <code>instance-attribute</code>","text":"<pre><code>attrs_changed: list[str]\n</code></pre> <p>A list of attributes that have changed.</p>"},{"location":"reference/aiovantage/events/#aiovantage.events.ObjectDeleted","title":"ObjectDeleted  <code>dataclass</code>","text":"<pre><code>ObjectDeleted(obj: T)\n</code></pre> <p>               Bases: <code>Generic[T]</code></p> <p>Event emitted when an object is removed from a controller.</p> <p>Attributes:</p> <ul> <li> <code>obj</code>               (<code>T</code>)           \u2013            <p>The object that the event is related to.</p> </li> </ul>"},{"location":"reference/aiovantage/events/#aiovantage.events.ObjectDeleted.obj","title":"obj  <code>instance-attribute</code>","text":"<pre><code>obj: T\n</code></pre> <p>The object that the event is related to.</p>"},{"location":"reference/aiovantage/object_interfaces/","title":"aiovantage.object_interfaces","text":""},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces","title":"aiovantage.object_interfaces","text":"<p>Object interfaces classes.</p> <p>Object interface classes define how an object's state is accessed and modified. Each object implements one or more interfaces, with all objects automatically supporting <code>ObjectInterface</code> through inheritance from <code>SystemObject</code>.</p> <p>Object interfaces expose state properties, which represent dynamic attributes that change during the operation of the system, such as the level a light or the current temperature of a thermostat. These properties are distinct from configuration properties, which are set when the system is programmed from Design Center and remain fixed during normal operation.</p> <p>State properties can be retrieved using <code>fetch_state</code> and are kept up to date by calling <code>handle_object_status</code> or <code>handle_category_status</code> when messages are received from the command client event stream.</p> <p>In practice, controllers are responsible for managing state properties. They handle the initial retrieval of state, process updates from the event stream, and ensure that the latest state is reflected in the system.</p> <p>Classes:</p> <ul> <li> <code>AnemoSensorInterface</code>           \u2013            <p>Anemo sensor object interface.</p> </li> <li> <code>Interface</code>           \u2013            <p>Base class for object interfaces.</p> </li> <li> <code>BlindInterface</code>           \u2013            <p>Blind object interface.</p> </li> <li> <code>ButtonInterface</code>           \u2013            <p>Button object interface.</p> </li> <li> <code>ColorTemperatureInterface</code>           \u2013            <p>Interface for querying and controlling color temperature.</p> </li> <li> <code>ConfigurationInterface</code>           \u2013            <p>Configuration object interface.</p> </li> <li> <code>CurrentSensorInterface</code>           \u2013            <p>Current sensor object interface.</p> </li> <li> <code>FanInterface</code>           \u2013            <p>Fan object interface.</p> </li> <li> <code>GMemInterface</code>           \u2013            <p>GMem object interface.</p> </li> <li> <code>IntrospectionInterface</code>           \u2013            <p>Introspection object interface.</p> </li> <li> <code>LightSensorInterface</code>           \u2013            <p>Light sensor object interface.</p> </li> <li> <code>LoadInterface</code>           \u2013            <p>Load object interface.</p> </li> <li> <code>ObjectInterface</code>           \u2013            <p>'Object' object interface.</p> </li> <li> <code>PowerSensorInterface</code>           \u2013            <p>Power sensor interface.</p> </li> <li> <code>RGBLoadInterface</code>           \u2013            <p>RGB load interface.</p> </li> <li> <code>SensorInterface</code>           \u2013            <p>Sensor interface.</p> </li> <li> <code>SounderInterface</code>           \u2013            <p>Sounder interface.</p> </li> <li> <code>TaskInterface</code>           \u2013            <p>Task interface.</p> </li> <li> <code>TemperatureInterface</code>           \u2013            <p>Temperature interface.</p> </li> <li> <code>ThermostatInterface</code>           \u2013            <p>Thermostat interface.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.AnemoSensorInterface","title":"AnemoSensorInterface","text":"<p>               Bases: <code>Interface</code></p> <p>Anemo sensor object interface.</p> <p>Methods:</p> <ul> <li> <code>get_speed</code>             \u2013              <p>Get the speed of an anemo sensor.</p> </li> <li> <code>set_speed</code>             \u2013              <p>Set the speed of an anemo sensor.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.AnemoSensorInterface.get_speed","title":"get_speed  <code>async</code>","text":"<pre><code>get_speed(*, hw: bool = False) -&gt; Decimal\n</code></pre> <p>Get the speed of an anemo sensor.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The speed of the anemo sensor, in mph.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.AnemoSensorInterface.set_speed","title":"set_speed  <code>async</code>","text":"<pre><code>set_speed(speed: Decimal, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the speed of an anemo sensor.</p> <p>Parameters:</p> <ul> <li> <code>speed</code>               (<code>Decimal</code>)           \u2013            <p>The speed to set, in mph.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.Interface","title":"Interface","text":"<p>Base class for object interfaces.</p> <p>Methods:</p> <ul> <li> <code>invoke</code>             \u2013              <p>Invoke a method on an object, and return the parsed response.</p> </li> <li> <code>update_properties</code>             \u2013              <p>Update object properties.</p> </li> <li> <code>fetch_state</code>             \u2013              <p>Fetch state properties provided by the interface(s) this object implements.</p> </li> <li> <code>handle_object_status</code>             \u2013              <p>Handle an object interface status message.</p> </li> <li> <code>handle_category_status</code>             \u2013              <p>Handle category status messages.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>interface_name</code>               (<code>str</code>)           \u2013            <p>The name of the interface.</p> </li> <li> <code>command_client</code>               (<code>CommandClient | None</code>)           \u2013            <p>The command client instance to use for making requests.</p> </li> <li> <code>vid</code>               (<code>int</code>)           \u2013            <p>The Vantage ID of the object to send requests to, typically set in a subclass.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.Interface.interface_name","title":"interface_name  <code>class-attribute</code>","text":"<pre><code>interface_name: str\n</code></pre> <p>The name of the interface.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.Interface.command_client","title":"command_client  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>command_client: CommandClient | None = None\n</code></pre> <p>The command client instance to use for making requests.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.Interface.vid","title":"vid  <code>instance-attribute</code>","text":"<pre><code>vid: int\n</code></pre> <p>The Vantage ID of the object to send requests to, typically set in a subclass.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.Interface.invoke","title":"invoke  <code>async</code>","text":"<pre><code>invoke(method: str, *params: Any) -&gt; Any\n</code></pre><pre><code>invoke(method: str, *params: Any, as_type: type[T]) -&gt; T\n</code></pre> <pre><code>invoke(method: str, *params: Any, as_type: type[T] | None = None) -&gt; T | Any\n</code></pre> <p>Invoke a method on an object, and return the parsed response.</p> <p>Parameters:</p> <ul> <li> <code>method</code>               (<code>str</code>)           \u2013            <p>The method to invoke.</p> </li> <li> <code>params</code>               (<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>The parameters to send with the method.</p> </li> <li> <code>as_type</code>               (<code>type[T] | None</code>, default:                   <code>None</code> )           \u2013            <p>The expected return type of the method, will attempt to infer if not provided.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>T | Any</code>           \u2013            <p>A parsed response, or None if no response was expected.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.Interface.update_properties","title":"update_properties","text":"<pre><code>update_properties(properties: dict[str, Any]) -&gt; list[str]\n</code></pre> <p>Update object properties.</p> <p>Parameters:</p> <ul> <li> <code>properties</code>               (<code>dict[str, Any]</code>)           \u2013            <p>A dictionary of property names and their new values.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>A list of property names that were updated.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.Interface.fetch_state","title":"fetch_state  <code>async</code>","text":"<pre><code>fetch_state() -&gt; list[str]\n</code></pre> <p>Fetch state properties provided by the interface(s) this object implements.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>A list of property names that were updated.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.Interface.handle_object_status","title":"handle_object_status","text":"<pre><code>handle_object_status(method: str, result: str, *args: str) -&gt; list[str]\n</code></pre> <p>Handle an object interface status message.</p> <p>Parameters:</p> <ul> <li> <code>method</code>               (<code>str</code>)           \u2013            <p>The method that was invoked.</p> </li> <li> <code>result</code>               (<code>str</code>)           \u2013            <p>The result of the command.</p> </li> <li> <code>args</code>               (<code>str</code>, default:                   <code>()</code> )           \u2013            <p>The arguments that were sent with the command.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>A list of property names that were updated.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.Interface.handle_category_status","title":"handle_category_status","text":"<pre><code>handle_category_status(category: str, *args: str) -&gt; list[str]\n</code></pre> <p>Handle category status messages.</p> <p>Object interfaces which can handle \"legacy\" status messages from the Host Command service should override this method.</p> <p>Parameters:</p> <ul> <li> <code>category</code>               (<code>str</code>)           \u2013            <p>The category of the status message, eg. \"LOAD\".</p> </li> <li> <code>args</code>               (<code>str</code>, default:                   <code>()</code> )           \u2013            <p>The arguments that were sent with the command.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>A list of property names that were updated.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.BlindInterface","title":"BlindInterface  <code>dataclass</code>","text":"<pre><code>BlindInterface(*, shade_orientation: str | None = None)\n</code></pre> <p>               Bases: <code>Interface</code>, <code>ShadeOrientation</code>, <code>ShadeType</code></p> <p>Blind object interface.</p> <p>Classes:</p> <ul> <li> <code>BlindState</code>           \u2013            <p>The state of a blind.</p> </li> <li> <code>TravelTimes</code>           \u2013            <p>The travel times of a blind.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>open</code>             \u2013              <p>Open a blind.</p> </li> <li> <code>close</code>             \u2013              <p>Close a blind.</p> </li> <li> <code>stop</code>             \u2013              <p>Stop a blind.</p> </li> <li> <code>set_position</code>             \u2013              <p>Set the position of a blind.</p> </li> <li> <code>get_position</code>             \u2013              <p>Get the position of a blind.</p> </li> <li> <code>set_tilt_angle</code>             \u2013              <p>Set the tilt angle of a blind.</p> </li> <li> <code>get_tilt_angle</code>             \u2013              <p>Get the tilt angle of a blind.</p> </li> <li> <code>tilt_clockwise</code>             \u2013              <p>Tilt the blinds clockwise by the specified angle.</p> </li> <li> <code>tilt_counter_clockwise</code>             \u2013              <p>Tilt the shades counter-clockwise by the specified angle.</p> </li> <li> <code>is_tilt_available</code>             \u2013              <p>Check if the blind can tilt in its current state.</p> </li> <li> <code>set_tilt_available</code>             \u2013              <p>Set the cached tilt availability of a blind.</p> </li> <li> <code>get_blind_state</code>             \u2013              <p>Get the state of a blind.</p> </li> <li> <code>set_upper_limit</code>             \u2013              <p>Set the upper limit of a blind.</p> </li> <li> <code>get_upper_limit</code>             \u2013              <p>Get the upper limit of a blind.</p> </li> <li> <code>set_lower_limit</code>             \u2013              <p>Set the lower limit of a blind.</p> </li> <li> <code>get_lower_limit</code>             \u2013              <p>Get the lower limit of a blind.</p> </li> <li> <code>get_travel_times</code>             \u2013              <p>Get the travel times of a blind.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.BlindInterface.BlindState","title":"BlindState  <code>dataclass</code>","text":"<pre><code>BlindState(is_moving: bool, start_pos: Decimal, end_pos: Decimal, transition_time: Decimal, start_time: int)\n</code></pre> <p>The state of a blind.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.BlindInterface.TravelTimes","title":"TravelTimes  <code>dataclass</code>","text":"<pre><code>TravelTimes(open_time: Decimal, close_time: Decimal)\n</code></pre> <p>The travel times of a blind.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.BlindInterface.open","title":"open  <code>async</code>","text":"<pre><code>open() -&gt; None\n</code></pre> <p>Open a blind.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.BlindInterface.close","title":"close  <code>async</code>","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Close a blind.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.BlindInterface.stop","title":"stop  <code>async</code>","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop a blind.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.BlindInterface.set_position","title":"set_position  <code>async</code>","text":"<pre><code>set_position(position: float, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the position of a blind.</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>float</code>)           \u2013            <p>The position to set the blind to, as a percentage.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.BlindInterface.get_position","title":"get_position  <code>async</code>","text":"<pre><code>get_position(*, hw: bool = False) -&gt; Decimal\n</code></pre> <p>Get the position of a blind.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The position of the blind, as a percentage.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.BlindInterface.set_tilt_angle","title":"set_tilt_angle  <code>async</code>","text":"<pre><code>set_tilt_angle(angle: int, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the tilt angle of a blind.</p> <p>Parameters:</p> <ul> <li> <code>angle</code>               (<code>int</code>)           \u2013            <p>The angle to set the blind to, from -100 to 100.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.BlindInterface.get_tilt_angle","title":"get_tilt_angle  <code>async</code>","text":"<pre><code>get_tilt_angle(*, hw: bool = False) -&gt; int\n</code></pre> <p>Get the tilt angle of a blind.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The tilt angle of the blind, from -100 to 100.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.BlindInterface.tilt_clockwise","title":"tilt_clockwise  <code>async</code>","text":"<pre><code>tilt_clockwise(angle: int) -&gt; None\n</code></pre> <p>Tilt the blinds clockwise by the specified angle.</p> <p>Parameters:</p> <ul> <li> <code>angle</code>               (<code>int</code>)           \u2013            <p>The angle offset the blinds should be tilted.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.BlindInterface.tilt_counter_clockwise","title":"tilt_counter_clockwise  <code>async</code>","text":"<pre><code>tilt_counter_clockwise(angle: int) -&gt; None\n</code></pre> <p>Tilt the shades counter-clockwise by the specified angle.</p> <p>Parameters:</p> <ul> <li> <code>angle</code>               (<code>int</code>)           \u2013            <p>The angle offset the blinds should be tilted.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.BlindInterface.is_tilt_available","title":"is_tilt_available  <code>async</code>","text":"<pre><code>is_tilt_available() -&gt; bool\n</code></pre> <p>Check if the blind can tilt in its current state.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Whether the blind supports tilting.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.BlindInterface.set_tilt_available","title":"set_tilt_available  <code>async</code>","text":"<pre><code>set_tilt_available(available: bool) -&gt; None\n</code></pre> <p>Set the cached tilt availability of a blind.</p> <p>Parameters:</p> <ul> <li> <code>available</code>               (<code>bool</code>)           \u2013            <p>Whether the blind supports tilting.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.BlindInterface.get_blind_state","title":"get_blind_state  <code>async</code>","text":"<pre><code>get_blind_state() -&gt; BlindState\n</code></pre> <p>Get the state of a blind.</p> <p>Returns:</p> <ul> <li> <code>BlindState</code>           \u2013            <p>The state of the blind.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.BlindInterface.set_upper_limit","title":"set_upper_limit  <code>async</code>","text":"<pre><code>set_upper_limit(limit: Decimal, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the upper limit of a blind.</p> <p>Parameters:</p> <ul> <li> <code>limit</code>               (<code>Decimal</code>)           \u2013            <p>The upper limit to set the blind to, as a percentage.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.BlindInterface.get_upper_limit","title":"get_upper_limit  <code>async</code>","text":"<pre><code>get_upper_limit(*, hw: bool = False) -&gt; Decimal\n</code></pre> <p>Get the upper limit of a blind.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The upper limit of the blind, as a percentage.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.BlindInterface.set_lower_limit","title":"set_lower_limit  <code>async</code>","text":"<pre><code>set_lower_limit(limit: Decimal, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the lower limit of a blind.</p> <p>Parameters:</p> <ul> <li> <code>limit</code>               (<code>Decimal</code>)           \u2013            <p>The lower limit to set the blind to, as a percentage.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.BlindInterface.get_lower_limit","title":"get_lower_limit  <code>async</code>","text":"<pre><code>get_lower_limit(*, hw: bool = False) -&gt; Decimal\n</code></pre> <p>Get the lower limit of a blind.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The lower limit of the blind, as a percentage.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.BlindInterface.get_travel_times","title":"get_travel_times  <code>async</code>","text":"<pre><code>get_travel_times() -&gt; TravelTimes\n</code></pre> <p>Get the travel times of a blind.</p> <p>Returns:</p> <ul> <li> <code>TravelTimes</code>           \u2013            <p>The travel times of the blind.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ButtonInterface","title":"ButtonInterface","text":"<p>               Bases: <code>Interface</code></p> <p>Button object interface.</p> <p>Classes:</p> <ul> <li> <code>State</code>           \u2013            <p>Button state.</p> </li> <li> <code>SndType</code>           \u2013            <p>Button sound type.</p> </li> <li> <code>Polarity</code>           \u2013            <p>Button polarity.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_state</code>             \u2013              <p>Get the state of a button.</p> </li> <li> <code>set_state</code>             \u2013              <p>Set the state of a button.</p> </li> <li> <code>get_hold_on</code>             \u2013              <p>Get the hold on time of a button.</p> </li> <li> <code>set_hold_on</code>             \u2013              <p>Set the hold on time of a button.</p> </li> <li> <code>get_polarity</code>             \u2013              <p>Get the polarity of a button.</p> </li> <li> <code>set_polarity</code>             \u2013              <p>Set the polarity of a button.</p> </li> <li> <code>get_snd_type</code>             \u2013              <p>Get the sound type of a button.</p> </li> <li> <code>set_snd_type</code>             \u2013              <p>Set the sound type of a button.</p> </li> <li> <code>get_placement</code>             \u2013              <p>Get the placement of a button.</p> </li> <li> <code>set_placement</code>             \u2013              <p>Set the placement of a button.</p> </li> <li> <code>press</code>             \u2013              <p>Press a button.</p> </li> <li> <code>release</code>             \u2013              <p>Release a button.</p> </li> <li> <code>press_and_release</code>             \u2013              <p>Press and release a button.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>is_down</code>               (<code>bool | None</code>)           \u2013            <p>Return True if the button is down.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ButtonInterface.is_down","title":"is_down  <code>property</code>","text":"<pre><code>is_down: bool | None\n</code></pre> <p>Return True if the button is down.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ButtonInterface.State","title":"State","text":"<p>               Bases: <code>IntEnum</code></p> <p>Button state.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ButtonInterface.SndType","title":"SndType","text":"<p>               Bases: <code>IntEnum</code></p> <p>Button sound type.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ButtonInterface.Polarity","title":"Polarity","text":"<p>               Bases: <code>IntEnum</code></p> <p>Button polarity.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ButtonInterface.get_state","title":"get_state  <code>async</code>","text":"<pre><code>get_state(*, hw: bool = False) -&gt; State\n</code></pre> <p>Get the state of a button.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>State</code>           \u2013            <p>The pressed state of the button.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ButtonInterface.set_state","title":"set_state  <code>async</code>","text":"<pre><code>set_state(state: State, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the state of a button.</p> <p>Parameters:</p> <ul> <li> <code>state</code>               (<code>State</code>)           \u2013            <p>The state to set the button to, either a State.UP or State.DOWN.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ButtonInterface.get_hold_on","title":"get_hold_on  <code>async</code>","text":"<pre><code>get_hold_on(*, hw: bool = False) -&gt; Decimal\n</code></pre> <p>Get the hold on time of a button.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The hold on time of the button, in seconds.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ButtonInterface.set_hold_on","title":"set_hold_on  <code>async</code>","text":"<pre><code>set_hold_on(seconds: Decimal, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the hold on time of a button.</p> <p>Parameters:</p> <ul> <li> <code>seconds</code>               (<code>Decimal</code>)           \u2013            <p>The hold on time to set, in seconds.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ButtonInterface.get_polarity","title":"get_polarity  <code>async</code>","text":"<pre><code>get_polarity(*, hw: bool = False) -&gt; Polarity\n</code></pre> <p>Get the polarity of a button.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Polarity</code>           \u2013            <p>The polarity of the button.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ButtonInterface.set_polarity","title":"set_polarity  <code>async</code>","text":"<pre><code>set_polarity(polarity: Polarity, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the polarity of a button.</p> <p>Parameters:</p> <ul> <li> <code>polarity</code>               (<code>Polarity</code>)           \u2013            <p>The polarity to set the button to.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ButtonInterface.get_snd_type","title":"get_snd_type  <code>async</code>","text":"<pre><code>get_snd_type(*, hw: bool = False) -&gt; SndType\n</code></pre> <p>Get the sound type of a button.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>SndType</code>           \u2013            <p>The sound type of the button.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ButtonInterface.set_snd_type","title":"set_snd_type  <code>async</code>","text":"<pre><code>set_snd_type(snd_type: SndType, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the sound type of a button.</p> <p>Parameters:</p> <ul> <li> <code>snd_type</code>               (<code>SndType</code>)           \u2013            <p>The sound type to set the button to.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ButtonInterface.get_placement","title":"get_placement  <code>async</code>","text":"<pre><code>get_placement(*, hw: bool = False) -&gt; int\n</code></pre> <p>Get the placement of a button.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The placement of the button on the keypad.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ButtonInterface.set_placement","title":"set_placement  <code>async</code>","text":"<pre><code>set_placement(placement: int, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the placement of a button.</p> <p>Parameters:</p> <ul> <li> <code>placement</code>               (<code>int</code>)           \u2013            <p>The placement of the button on the keypad.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ButtonInterface.press","title":"press  <code>async</code>","text":"<pre><code>press() -&gt; None\n</code></pre> <p>Press a button.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ButtonInterface.release","title":"release  <code>async</code>","text":"<pre><code>release() -&gt; None\n</code></pre> <p>Release a button.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ButtonInterface.press_and_release","title":"press_and_release  <code>async</code>","text":"<pre><code>press_and_release() -&gt; None\n</code></pre> <p>Press and release a button.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ColorTemperatureInterface","title":"ColorTemperatureInterface","text":"<p>               Bases: <code>Interface</code></p> <p>Interface for querying and controlling color temperature.</p> <p>Classes:</p> <ul> <li> <code>Preset</code>           \u2013            <p>Color temperature preset.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>set_color_temp</code>             \u2013              <p>Set the color temperature of a light.</p> </li> <li> <code>get_color_temp</code>             \u2013              <p>Get the color temperature of a light.</p> </li> <li> <code>stop_transition</code>             \u2013              <p>Stop any ongoing color temperature transitions.</p> </li> <li> <code>warm</code>             \u2013              <p>Decrease the color temperature of a light.</p> </li> <li> <code>cool</code>             \u2013              <p>Increase the color temperature of a light.</p> </li> <li> <code>set_temperature_preset</code>             \u2013              <p>Set the color temperature of a light to a preset value.</p> </li> <li> <code>get_temperature_preset</code>             \u2013              <p>Get the color temperature preset of a light.</p> </li> <li> <code>get_max_value</code>             \u2013              <p>Get the maximum color temperature of a light.</p> </li> <li> <code>set_max_value</code>             \u2013              <p>Set the cached maximum color temperature of a light.</p> </li> <li> <code>get_min_value</code>             \u2013              <p>Get the minimum color temperature of a light.</p> </li> <li> <code>set_min_value</code>             \u2013              <p>Set the cached minimum color temperature of a light.</p> </li> <li> <code>get_transition_temperature</code>             \u2013              <p>Get the current color temperature of a light in transition.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ColorTemperatureInterface.Preset","title":"Preset","text":"<p>               Bases: <code>IntEnum</code></p> <p>Color temperature preset.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ColorTemperatureInterface.set_color_temp","title":"set_color_temp  <code>async</code>","text":"<pre><code>set_color_temp(temp: int, transition: int = 0, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the color temperature of a light.</p> <p>Parameters:</p> <ul> <li> <code>temp</code>               (<code>int</code>)           \u2013            <p>The color temperature to set the light to, in Kelvin.</p> </li> <li> <code>transition</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The time in seconds to transition to the new color temperature.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ColorTemperatureInterface.get_color_temp","title":"get_color_temp  <code>async</code>","text":"<pre><code>get_color_temp(*, hw: bool = False) -&gt; int\n</code></pre> <p>Get the color temperature of a light.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The color temperature of the light, in Kelvin.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ColorTemperatureInterface.stop_transition","title":"stop_transition  <code>async</code>","text":"<pre><code>stop_transition() -&gt; None\n</code></pre> <p>Stop any ongoing color temperature transitions.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ColorTemperatureInterface.warm","title":"warm  <code>async</code>","text":"<pre><code>warm(amount: int, transition_time: float | Decimal) -&gt; None\n</code></pre> <p>Decrease the color temperature of a light.</p> <p>Parameters:</p> <ul> <li> <code>amount</code>               (<code>int</code>)           \u2013            <p>The amount to decrease the color temperature by.</p> </li> <li> <code>transition_time</code>               (<code>float | Decimal</code>)           \u2013            <p>The time in seconds to transition to the new color.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ColorTemperatureInterface.cool","title":"cool  <code>async</code>","text":"<pre><code>cool(amount: int, transition_time: float | Decimal) -&gt; None\n</code></pre> <p>Increase the color temperature of a light.</p> <p>Parameters:</p> <ul> <li> <code>amount</code>               (<code>int</code>)           \u2013            <p>The amount to increase the color temperature by.</p> </li> <li> <code>transition_time</code>               (<code>float | Decimal</code>)           \u2013            <p>The time in seconds to transition to the new color.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ColorTemperatureInterface.set_temperature_preset","title":"set_temperature_preset  <code>async</code>","text":"<pre><code>set_temperature_preset(value: Preset, transition_time: float | Decimal) -&gt; None\n</code></pre> <p>Set the color temperature of a light to a preset value.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>Preset</code>)           \u2013            <p>The preset value to set the light to.</p> </li> <li> <code>transition_time</code>               (<code>float | Decimal</code>)           \u2013            <p>The time in seconds to transition to the new color.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ColorTemperatureInterface.get_temperature_preset","title":"get_temperature_preset  <code>async</code>","text":"<pre><code>get_temperature_preset() -&gt; Preset\n</code></pre> <p>Get the color temperature preset of a light.</p> <p>Returns:</p> <ul> <li> <code>Preset</code>           \u2013            <p>The color temperature preset of the light.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ColorTemperatureInterface.get_max_value","title":"get_max_value  <code>async</code>","text":"<pre><code>get_max_value(*, hw: bool = False) -&gt; int\n</code></pre> <p>Get the maximum color temperature of a light.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The maximum color temperature of the light, in Kelvin.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ColorTemperatureInterface.set_max_value","title":"set_max_value  <code>async</code>","text":"<pre><code>set_max_value(value: int) -&gt; None\n</code></pre> <p>Set the cached maximum color temperature of a light.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>int</code>)           \u2013            <p>The maximum color temperature to set the light to, in Kelvin.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ColorTemperatureInterface.get_min_value","title":"get_min_value  <code>async</code>","text":"<pre><code>get_min_value(*, hw: bool = False) -&gt; int\n</code></pre> <p>Get the minimum color temperature of a light.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The minimum color temperature of the light, in Kelvin.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ColorTemperatureInterface.set_min_value","title":"set_min_value  <code>async</code>","text":"<pre><code>set_min_value(value: int) -&gt; None\n</code></pre> <p>Set the cached minimum color temperature of a light.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>int</code>)           \u2013            <p>The minimum color temperature to set the light to, in Kelvin.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ColorTemperatureInterface.get_transition_temperature","title":"get_transition_temperature  <code>async</code>","text":"<pre><code>get_transition_temperature() -&gt; int\n</code></pre> <p>Get the current color temperature of a light in transition.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The transition temperature of the light, in Kelvin.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ConfigurationInterface","title":"ConfigurationInterface","text":"<p>               Bases: <code>Interface</code></p> <p>Configuration object interface.</p> <p>Classes:</p> <ul> <li> <code>Store</code>           \u2013            <p>Configuration store.</p> </li> <li> <code>Compression</code>           \u2013            <p>Configuration compression type.</p> </li> <li> <code>SolarEvent</code>           \u2013            <p>Solar event types.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_controller_vid</code>             \u2013              <p>Get the VID of a controller, based on the controller number.</p> </li> <li> <code>delete_object</code>             \u2013              <p>Delete an object from the controller.</p> </li> <li> <code>create_object</code>             \u2013              <p>Create an object on the controller.</p> </li> <li> <code>get_modification_time</code>             \u2013              <p>Get the modification time of this object.</p> </li> <li> <code>get_last_delete_time</code>             \u2013              <p>Get the time of the last object deletion.</p> </li> <li> <code>get_last_clear_time</code>             \u2013              <p>Get the time of the last clear.</p> </li> <li> <code>open_filter</code>             \u2013              <p>Open a filter on a store.</p> </li> <li> <code>get_next_object_vid</code>             \u2013              <p>Get the VID of the next object in a filter.</p> </li> <li> <code>close_filter</code>             \u2013              <p>Close a filter.</p> </li> <li> <code>find_local_object</code>             \u2013              <p>Find a \"local\" object by VID, i.e. an object managed by this object.</p> </li> <li> <code>get_time_zone</code>             \u2013              <p>Get the time zone.</p> </li> <li> <code>get_time_location</code>             \u2013              <p>Get the time location.</p> </li> <li> <code>get_astronomical_time</code>             \u2013              <p>Get the astronomical time of a solar event.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ConfigurationInterface.Store","title":"Store","text":"<p>               Bases: <code>IntEnum</code></p> <p>Configuration store.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ConfigurationInterface.Compression","title":"Compression","text":"<p>               Bases: <code>IntFlag</code></p> <p>Configuration compression type.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ConfigurationInterface.SolarEvent","title":"SolarEvent","text":"<p>               Bases: <code>IntEnum</code></p> <p>Solar event types.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ConfigurationInterface.get_controller_vid","title":"get_controller_vid  <code>async</code>","text":"<pre><code>get_controller_vid(controller: int) -&gt; int\n</code></pre> <p>Get the VID of a controller, based on the controller number.</p> <p>Parameters:</p> <ul> <li> <code>controller</code>               (<code>int</code>)           \u2013            <p>The controller number to get the VID of.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ConfigurationInterface.delete_object","title":"delete_object  <code>async</code>","text":"<pre><code>delete_object(store: Store, vid: int) -&gt; None\n</code></pre> <p>Delete an object from the controller.</p> <p>Parameters:</p> <ul> <li> <code>store</code>               (<code>Store</code>)           \u2013            <p>The store to delete the object from.</p> </li> <li> <code>vid</code>               (<code>int</code>)           \u2013            <p>The VID of the object to delete.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ConfigurationInterface.create_object","title":"create_object  <code>async</code>","text":"<pre><code>create_object(type: str) -&gt; int\n</code></pre> <p>Create an object on the controller.</p> <p>Parameters:</p> <ul> <li> <code>type</code>               (<code>str</code>)           \u2013            <p>The type of object to create, eg. \"Load\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The VID of the created object, 0 if the object could not be created.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ConfigurationInterface.get_modification_time","title":"get_modification_time  <code>async</code>","text":"<pre><code>get_modification_time() -&gt; datetime\n</code></pre> <p>Get the modification time of this object.</p> <p>Returns:</p> <ul> <li> <code>datetime</code>           \u2013            <p>The modification time of the object, as a datetime object.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ConfigurationInterface.get_last_delete_time","title":"get_last_delete_time  <code>async</code>","text":"<pre><code>get_last_delete_time(store: Store) -&gt; datetime\n</code></pre> <p>Get the time of the last object deletion.</p> <p>Parameters:</p> <ul> <li> <code>store</code>               (<code>Store</code>)           \u2013            <p>The store to get the last deletion time of.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>datetime</code>           \u2013            <p>The time of the last object deletion, as a datetime object.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ConfigurationInterface.get_last_clear_time","title":"get_last_clear_time  <code>async</code>","text":"<pre><code>get_last_clear_time() -&gt; datetime\n</code></pre> <p>Get the time of the last clear.</p> <p>Returns:</p> <ul> <li> <code>datetime</code>           \u2013            <p>The time of the last store clear, as a datetime object.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ConfigurationInterface.open_filter","title":"open_filter  <code>async</code>","text":"<pre><code>open_filter(store: Store, types: str = '', xpath: str = '') -&gt; int\n</code></pre> <p>Open a filter on a store.</p> <p>Parameters:</p> <ul> <li> <code>store</code>               (<code>Store</code>)           \u2013            <p>The store to open the filter on.</p> </li> <li> <code>types</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>An optional comma-separated list of object types to filter on.</p> </li> <li> <code>xpath</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>An optional xpath expression to filter on, eg. \"/Load\", \"/*[@VID='12']\"</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>An integer \"handle\" representing the opened filter.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ConfigurationInterface.get_next_object_vid","title":"get_next_object_vid  <code>async</code>","text":"<pre><code>get_next_object_vid(handle: int) -&gt; int\n</code></pre> <p>Get the VID of the next object in a filter.</p> <p>Parameters:</p> <ul> <li> <code>handle</code>               (<code>int</code>)           \u2013            <p>The filter handle to get the next object of.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The VID of the next object in the filter, or 0 if there are no more objects.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ConfigurationInterface.close_filter","title":"close_filter  <code>async</code>","text":"<pre><code>close_filter(handle: int) -&gt; None\n</code></pre> <p>Close a filter.</p> <p>Parameters:</p> <ul> <li> <code>handle</code>               (<code>int</code>)           \u2013            <p>The filter handle to close.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ConfigurationInterface.find_local_object","title":"find_local_object  <code>async</code>","text":"<pre><code>find_local_object(vid: int) -&gt; bool\n</code></pre> <p>Find a \"local\" object by VID, i.e. an object managed by this object.</p> <p>Parameters:</p> <ul> <li> <code>vid</code>               (<code>int</code>)           \u2013            <p>The VID of the object to find.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True if the object is found, False otherwise.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ConfigurationInterface.get_time_zone","title":"get_time_zone  <code>async</code>","text":"<pre><code>get_time_zone() -&gt; str\n</code></pre> <p>Get the time zone.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The vantage time zone string, eg. \"UTCPlusEight+8DAY,M3.2.0/02:00,M11.1.0/02:00\"</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ConfigurationInterface.get_time_location","title":"get_time_location  <code>async</code>","text":"<pre><code>get_time_location() -&gt; str\n</code></pre> <p>Get the time location.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A latitude and longitude string, eg. \"51.178908N1.826212W\"</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ConfigurationInterface.get_astronomical_time","title":"get_astronomical_time  <code>async</code>","text":"<pre><code>get_astronomical_time(event: SolarEvent, year: int, month: int, day: int) -&gt; datetime\n</code></pre> <p>Get the astronomical time of a solar event.</p> <p>Parameters:</p> <ul> <li> <code>event</code>               (<code>SolarEvent</code>)           \u2013            <p>The solar event to get the time of.</p> </li> <li> <code>year</code>               (<code>int</code>)           \u2013            <p>The year of the event.</p> </li> <li> <code>month</code>               (<code>int</code>)           \u2013            <p>The month of the event.</p> </li> <li> <code>day</code>               (<code>int</code>)           \u2013            <p>The day of the event.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>datetime</code>           \u2013            <p>The time of the solar event, as a datetime object.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.CurrentSensorInterface","title":"CurrentSensorInterface","text":"<p>               Bases: <code>Interface</code></p> <p>Current sensor object interface.</p> <p>Methods:</p> <ul> <li> <code>get_current</code>             \u2013              <p>Get the value of a current sensor.</p> </li> <li> <code>set_current</code>             \u2013              <p>Set the value of a current sensor.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.CurrentSensorInterface.get_current","title":"get_current  <code>async</code>","text":"<pre><code>get_current(*, hw: bool = False) -&gt; Decimal\n</code></pre> <p>Get the value of a current sensor.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The value of the current sensor, in Amps.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.CurrentSensorInterface.set_current","title":"set_current  <code>async</code>","text":"<pre><code>set_current(value: Decimal, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the value of a current sensor.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>Decimal</code>)           \u2013            <p>The value to set, in Amps.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.FanInterface","title":"FanInterface","text":"<p>               Bases: <code>Interface</code></p> <p>Fan object interface.</p> <p>Classes:</p> <ul> <li> <code>FanSpeed</code>           \u2013            <p>Fan speed.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_speed</code>             \u2013              <p>Get the speed of a fan.</p> </li> <li> <code>set_speed</code>             \u2013              <p>Set the speed of a fan.</p> </li> <li> <code>increase_speed</code>             \u2013              <p>Increase the speed of a fan.</p> </li> <li> <code>decrease_speed</code>             \u2013              <p>Decrease the speed of a fan.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.FanInterface.FanSpeed","title":"FanSpeed","text":"<p>               Bases: <code>IntEnum</code></p> <p>Fan speed.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.FanInterface.get_speed","title":"get_speed  <code>async</code>","text":"<pre><code>get_speed(*, hw: bool = False) -&gt; FanSpeed\n</code></pre> <p>Get the speed of a fan.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>FanSpeed</code>           \u2013            <p>The speed of the fan.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.FanInterface.set_speed","title":"set_speed  <code>async</code>","text":"<pre><code>set_speed(speed: FanSpeed, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the speed of a fan.</p> <p>Parameters:</p> <ul> <li> <code>speed</code>               (<code>FanSpeed</code>)           \u2013            <p>The speed to set the fan to.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.FanInterface.increase_speed","title":"increase_speed  <code>async</code>","text":"<pre><code>increase_speed(vid: int) -&gt; None\n</code></pre> <p>Increase the speed of a fan.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.FanInterface.decrease_speed","title":"decrease_speed  <code>async</code>","text":"<pre><code>decrease_speed() -&gt; None\n</code></pre> <p>Decrease the speed of a fan.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.GMemInterface","title":"GMemInterface","text":"<p>               Bases: <code>Interface</code></p> <p>GMem object interface.</p> <p>Classes:</p> <ul> <li> <code>Buffer</code>           \u2013            <p>Response from a GMem fetch operation.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>fetch</code>             \u2013              <p>Fetch the contents of the variable.</p> </li> <li> <code>commit</code>             \u2013              <p>Set the contents of the variable.</p> </li> <li> <code>get_value</code>             \u2013              <p>Get the value of a variable.</p> </li> <li> <code>set_value</code>             \u2013              <p>Set the value of a variable.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.GMemInterface.Buffer","title":"Buffer  <code>dataclass</code>","text":"<pre><code>Buffer(type: int, data: bytes)\n</code></pre> <p>Response from a GMem fetch operation.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.GMemInterface.fetch","title":"fetch  <code>async</code>","text":"<pre><code>fetch() -&gt; Buffer\n</code></pre> <p>Fetch the contents of the variable.</p> <p>Returns:</p> <ul> <li> <code>Buffer</code>           \u2013            <p>The contents of the variable.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.GMemInterface.commit","title":"commit  <code>async</code>","text":"<pre><code>commit(buffer: bytes) -&gt; None\n</code></pre> <p>Set the contents of the variable.</p> <p>Parameters:</p> <ul> <li> <code>buffer</code>               (<code>bytes</code>)           \u2013            <p>The contents to set the variable to.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.GMemInterface.get_value","title":"get_value  <code>async</code>","text":"<pre><code>get_value() -&gt; int | str | bytes\n</code></pre> <p>Get the value of a variable.</p> <p>Returns:</p> <ul> <li> <code>int | str | bytes</code>           \u2013            <p>The value of the variable, either a bool, int, or str.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.GMemInterface.set_value","title":"set_value  <code>async</code>","text":"<pre><code>set_value(value: Any) -&gt; None\n</code></pre> <p>Set the value of a variable.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>Any</code>)           \u2013            <p>The value to set, either a bool, int, or str.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.IntrospectionInterface","title":"IntrospectionInterface","text":"<p>               Bases: <code>Interface</code></p> <p>Introspection object interface.</p> <p>Classes:</p> <ul> <li> <code>Firmware</code>           \u2013            <p>Firmware image.</p> </li> <li> <code>LicenseType</code>           \u2013            <p>License type.</p> </li> <li> <code>LicenseInfo</code>           \u2013            <p>A license info response.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_app_controllers</code>             \u2013              <p>Get a list of controllers in application mode, excluding this controller.</p> </li> <li> <code>get_firmware_version</code>             \u2013              <p>Get the firmware version.</p> </li> <li> <code>get_license_info</code>             \u2013              <p>Get license information.</p> </li> <li> <code>get_application_version</code>             \u2013              <p>Get the application firmware version.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.IntrospectionInterface.Firmware","title":"Firmware","text":"<p>               Bases: <code>IntEnum</code></p> <p>Firmware image.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.IntrospectionInterface.LicenseType","title":"LicenseType","text":"<p>               Bases: <code>IntEnum</code></p> <p>License type.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.IntrospectionInterface.LicenseInfo","title":"LicenseInfo  <code>dataclass</code>","text":"<pre><code>LicenseInfo(used: int, total: int)\n</code></pre> <p>A license info response.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.IntrospectionInterface.get_app_controllers","title":"get_app_controllers  <code>async</code>","text":"<pre><code>get_app_controllers() -&gt; str\n</code></pre> <p>Get a list of controllers in application mode, excluding this controller.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A comma-separated list of controller numbers.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.IntrospectionInterface.get_firmware_version","title":"get_firmware_version  <code>async</code>","text":"<pre><code>get_firmware_version(image: Firmware) -&gt; str\n</code></pre> <p>Get the firmware version.</p> <p>Parameters:</p> <ul> <li> <code>image</code>               (<code>Firmware</code>)           \u2013            <p>The firmware image to get the version of.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.IntrospectionInterface.get_license_info","title":"get_license_info  <code>async</code>","text":"<pre><code>get_license_info(type: LicenseType) -&gt; LicenseInfo\n</code></pre> <p>Get license information.</p> <p>Parameters:</p> <ul> <li> <code>type</code>               (<code>LicenseType</code>)           \u2013            <p>The license type to get information for.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.IntrospectionInterface.get_application_version","title":"get_application_version  <code>async</code>","text":"<pre><code>get_application_version() -&gt; str\n</code></pre> <p>Get the application firmware version.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.LightSensorInterface","title":"LightSensorInterface","text":"<p>               Bases: <code>Interface</code></p> <p>Light sensor object interface.</p> <p>Methods:</p> <ul> <li> <code>get_level</code>             \u2013              <p>Get the level of a light sensor.</p> </li> <li> <code>set_level</code>             \u2013              <p>Set the level of a light sensor.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.LightSensorInterface.get_level","title":"get_level  <code>async</code>","text":"<pre><code>get_level(*, hw: bool = False) -&gt; Decimal\n</code></pre> <p>Get the level of a light sensor.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The level of the light sensor, in foot-candles.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.LightSensorInterface.set_level","title":"set_level  <code>async</code>","text":"<pre><code>set_level(level: Decimal) -&gt; None\n</code></pre> <p>Set the level of a light sensor.</p> <p>Parameters:</p> <ul> <li> <code>level</code>               (<code>Decimal</code>)           \u2013            <p>The level to set, in foot-candles.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.LoadInterface","title":"LoadInterface","text":"<p>               Bases: <code>Interface</code></p> <p>Load object interface.</p> <p>Classes:</p> <ul> <li> <code>RampType</code>           \u2013            <p>Load ramp type.</p> </li> <li> <code>AlertState</code>           \u2013            <p>Load alert state.</p> </li> <li> <code>DimmingConfig</code>           \u2013            <p>Load dimming config.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>set_level</code>             \u2013              <p>Set the level of a load.</p> </li> <li> <code>get_level</code>             \u2013              <p>Get the level of a load.</p> </li> <li> <code>ramp</code>             \u2013              <p>Ramp a load to a level over a number of seconds.</p> </li> <li> <code>set_profile</code>             \u2013              <p>Set the id of the power profile used by this load.</p> </li> <li> <code>get_profile</code>             \u2013              <p>Get the id of the power profile used by this load.</p> </li> <li> <code>get_override_level</code>             \u2013              <p>Get the override level of a load.</p> </li> <li> <code>ramp_auto_off</code>             \u2013              <p>Ramp a load to a level over a number of seconds, then ramp off after a timeout.</p> </li> <li> <code>get_alert_state</code>             \u2013              <p>Get the alert state of a load.</p> </li> <li> <code>set_alert_state</code>             \u2013              <p>Set the cached alert state of a load.</p> </li> <li> <code>get_dimming_config</code>             \u2013              <p>Get the dimming configuration of a load.</p> </li> <li> <code>turn_on</code>             \u2013              <p>Turn on a load with an optional transition time.</p> </li> <li> <code>turn_off</code>             \u2013              <p>Turn off a load with an optional transition time.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>is_on</code>               (<code>bool</code>)           \u2013            <p>Return True if the load is on.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.LoadInterface.is_on","title":"is_on  <code>property</code>","text":"<pre><code>is_on: bool\n</code></pre> <p>Return True if the load is on.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.LoadInterface.RampType","title":"RampType","text":"<p>               Bases: <code>IntEnum</code></p> <p>Load ramp type.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.LoadInterface.AlertState","title":"AlertState","text":"<p>               Bases: <code>IntEnum</code></p> <p>Load alert state.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.LoadInterface.DimmingConfig","title":"DimmingConfig","text":"<p>               Bases: <code>IntEnum</code></p> <p>Load dimming config.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.LoadInterface.set_level","title":"set_level  <code>async</code>","text":"<pre><code>set_level(level: float | Decimal, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the level of a load.</p> <p>Parameters:</p> <ul> <li> <code>level</code>               (<code>float | Decimal</code>)           \u2013            <p>The level to set the load to (0-100).</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.LoadInterface.get_level","title":"get_level  <code>async</code>","text":"<pre><code>get_level(*, hw: bool = False) -&gt; Decimal\n</code></pre> <p>Get the level of a load.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The level of the load, as a percentage (0-100).</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.LoadInterface.ramp","title":"ramp  <code>async</code>","text":"<pre><code>ramp(cmd: RampType, ramptime: float | Decimal, finallevel: float | Decimal) -&gt; None\n</code></pre> <p>Ramp a load to a level over a number of seconds.</p> <p>Parameters:</p> <ul> <li> <code>cmd</code>               (<code>RampType</code>)           \u2013            <p>The type of ramp to perform.</p> </li> <li> <code>ramptime</code>               (<code>float | Decimal</code>)           \u2013            <p>The number of seconds to ramp the load over.</p> </li> <li> <code>finallevel</code>               (<code>float | Decimal</code>)           \u2013            <p>The level to ramp the load to (0-100).</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.LoadInterface.set_profile","title":"set_profile  <code>async</code>","text":"<pre><code>set_profile(profile: int) -&gt; None\n</code></pre> <p>Set the id of the power profile used by this load.</p> <p>Parameters:</p> <ul> <li> <code>profile</code>               (<code>int</code>)           \u2013            <p>The power profile id to set the load to.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.LoadInterface.get_profile","title":"get_profile  <code>async</code>","text":"<pre><code>get_profile() -&gt; int\n</code></pre> <p>Get the id of the power profile used by this load.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The power profile id used by the load.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.LoadInterface.get_override_level","title":"get_override_level  <code>async</code>","text":"<pre><code>get_override_level() -&gt; Decimal\n</code></pre> <p>Get the override level of a load.</p> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The override level of the load, as a percentage (0-100).</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.LoadInterface.ramp_auto_off","title":"ramp_auto_off  <code>async</code>","text":"<pre><code>ramp_auto_off(cmd: RampType, ramptime: float | Decimal, finallevel: float | Decimal, offcmd: RampType, offramptime: float | Decimal, offtimeout: float | Decimal) -&gt; None\n</code></pre> <p>Ramp a load to a level over a number of seconds, then ramp off after a timeout.</p> <p>Parameters:</p> <ul> <li> <code>cmd</code>               (<code>RampType</code>)           \u2013            <p>The type of ramp to perform.</p> </li> <li> <code>ramptime</code>               (<code>float | Decimal</code>)           \u2013            <p>The number of seconds to ramp the load over.</p> </li> <li> <code>finallevel</code>               (<code>float | Decimal</code>)           \u2013            <p>The level to ramp the load to (0-100).</p> </li> <li> <code>offcmd</code>               (<code>RampType</code>)           \u2013            <p>The type of ramp to perform to turn the load off.</p> </li> <li> <code>offramptime</code>               (<code>float | Decimal</code>)           \u2013            <p>The number of seconds to ramp the load off over.</p> </li> <li> <code>offtimeout</code>               (<code>float | Decimal</code>)           \u2013            <p>The number of seconds to wait before turning the load off.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.LoadInterface.get_alert_state","title":"get_alert_state  <code>async</code>","text":"<pre><code>get_alert_state() -&gt; AlertState\n</code></pre> <p>Get the alert state of a load.</p> <p>Returns:</p> <ul> <li> <code>AlertState</code>           \u2013            <p>The alert state of the load.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.LoadInterface.set_alert_state","title":"set_alert_state  <code>async</code>","text":"<pre><code>set_alert_state(alert_state: AlertState) -&gt; None\n</code></pre> <p>Set the cached alert state of a load.</p> <p>Parameters:</p> <ul> <li> <code>alert_state</code>               (<code>AlertState</code>)           \u2013            <p>The alert state to set the load to.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.LoadInterface.get_dimming_config","title":"get_dimming_config  <code>async</code>","text":"<pre><code>get_dimming_config() -&gt; DimmingConfig\n</code></pre> <p>Get the dimming configuration of a load.</p> <p>Returns:</p> <ul> <li> <code>DimmingConfig</code>           \u2013            <p>The dimming configuration of the load.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.LoadInterface.turn_on","title":"turn_on  <code>async</code>","text":"<pre><code>turn_on(transition: float | None = None, level: float | None = None) -&gt; None\n</code></pre> <p>Turn on a load with an optional transition time.</p> <p>Parameters:</p> <ul> <li> <code>transition</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>The time in seconds to transition to the new level, defaults to immediate.</p> </li> <li> <code>level</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>The level to set the load to (0-100), defaults to 100.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.LoadInterface.turn_off","title":"turn_off  <code>async</code>","text":"<pre><code>turn_off(transition: float | None = None) -&gt; None\n</code></pre> <p>Turn off a load with an optional transition time.</p> <p>Parameters:</p> <ul> <li> <code>transition</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>The time in seconds to ramp the load down, defaults to immediate.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ObjectInterface","title":"ObjectInterface","text":"<p>               Bases: <code>Interface</code></p> <p>'Object' object interface.</p> <p>Methods:</p> <ul> <li> <code>get_vid</code>             \u2013              <p>Get the Vantage ID of an object.</p> </li> <li> <code>get_controller</code>             \u2013              <p>Get the VID of the controller of an object.</p> </li> <li> <code>get_type</code>             \u2013              <p>Get the type of an object.</p> </li> <li> <code>get_name</code>             \u2013              <p>Get the name field of an object.</p> </li> <li> <code>get_model</code>             \u2013              <p>Get the model field of an object.</p> </li> <li> <code>get_note</code>             \u2013              <p>Get the note field of an object.</p> </li> <li> <code>get_property</code>             \u2013              <p>Get an integer property of an object.</p> </li> <li> <code>get_property_ex</code>             \u2013              <p>Get a string property of an object.</p> </li> <li> <code>lock</code>             \u2013              <p>Lock an object.</p> </li> <li> <code>unlock</code>             \u2013              <p>Unlock an object.</p> </li> <li> <code>is_locked</code>             \u2013              <p>Check if an object is locked.</p> </li> <li> <code>is_interface_supported</code>             \u2013              <p>Check if an interface is supported by an object.</p> </li> <li> <code>is_method_supported</code>             \u2013              <p>Check if a method is supported by an object.</p> </li> <li> <code>set_property</code>             \u2013              <p>Set an integer property of an object.</p> </li> <li> <code>set_property_ex</code>             \u2013              <p>Set a string property of an object.</p> </li> <li> <code>is_enumerator_supported</code>             \u2013              <p>Check if an enumerator is supported by an object.</p> </li> <li> <code>get_m_time</code>             \u2013              <p>Get the modification time of an object.</p> </li> <li> <code>get_d_name</code>             \u2013              <p>Get the display name of an object.</p> </li> <li> <code>get_area</code>             \u2013              <p>Get the area of an object.</p> </li> <li> <code>get_supported_enum_values</code>             \u2013              <p>Get all supported enum values of an object.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ObjectInterface.get_vid","title":"get_vid  <code>async</code>","text":"<pre><code>get_vid() -&gt; int\n</code></pre> <p>Get the Vantage ID of an object.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The Vantage ID of the object.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ObjectInterface.get_controller","title":"get_controller  <code>async</code>","text":"<pre><code>get_controller() -&gt; int\n</code></pre> <p>Get the VID of the controller of an object.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The VID of the controller of the object.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ObjectInterface.get_type","title":"get_type  <code>async</code>","text":"<pre><code>get_type() -&gt; str\n</code></pre> <p>Get the type of an object.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The type of the object.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ObjectInterface.get_name","title":"get_name  <code>async</code>","text":"<pre><code>get_name() -&gt; str\n</code></pre> <p>Get the name field of an object.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The name of the object.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ObjectInterface.get_model","title":"get_model  <code>async</code>","text":"<pre><code>get_model() -&gt; str\n</code></pre> <p>Get the model field of an object.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The model of the object.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ObjectInterface.get_note","title":"get_note  <code>async</code>","text":"<pre><code>get_note() -&gt; str\n</code></pre> <p>Get the note field of an object.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The note of the object.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ObjectInterface.get_property","title":"get_property  <code>async</code>","text":"<pre><code>get_property(xpath: str) -&gt; int\n</code></pre> <p>Get an integer property of an object.</p> <p>Parameters:</p> <ul> <li> <code>xpath</code>               (<code>str</code>)           \u2013            <p>XPath of the property to get, eg: \"DName\", \"Get/Formula/@ReturnType, etc.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the property.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ObjectInterface.get_property_ex","title":"get_property_ex  <code>async</code>","text":"<pre><code>get_property_ex(xpath: str) -&gt; str\n</code></pre> <p>Get a string property of an object.</p> <p>Parameters:</p> <ul> <li> <code>xpath</code>               (<code>str</code>)           \u2013            <p>XPath of the property to get, eg: \"DName\", \"Get/Formula/@ReturnType, etc.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The value of the property.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ObjectInterface.lock","title":"lock  <code>async</code>","text":"<pre><code>lock() -&gt; None\n</code></pre> <p>Lock an object.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ObjectInterface.unlock","title":"unlock  <code>async</code>","text":"<pre><code>unlock() -&gt; None\n</code></pre> <p>Unlock an object.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ObjectInterface.is_locked","title":"is_locked  <code>async</code>","text":"<pre><code>is_locked() -&gt; bool\n</code></pre> <p>Check if an object is locked.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True if the object is locked, False otherwise.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ObjectInterface.is_interface_supported","title":"is_interface_supported  <code>async</code>","text":"<pre><code>is_interface_supported(iid: int) -&gt; bool\n</code></pre> <p>Check if an interface is supported by an object.</p> <p>Parameters:</p> <ul> <li> <code>iid</code>               (<code>int</code>)           \u2013            <p>The interface ID to check.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True if the interface is supported, False otherwise.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ObjectInterface.is_method_supported","title":"is_method_supported  <code>async</code>","text":"<pre><code>is_method_supported(iid: int, mid: int) -&gt; bool\n</code></pre> <p>Check if a method is supported by an object.</p> <p>Parameters:</p> <ul> <li> <code>iid</code>               (<code>int</code>)           \u2013            <p>The interface ID to check.</p> </li> <li> <code>mid</code>               (<code>int</code>)           \u2013            <p>The method ID to check.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True if the method is supported, False otherwise.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ObjectInterface.set_property","title":"set_property  <code>async</code>","text":"<pre><code>set_property(property: str, value: int) -&gt; None\n</code></pre> <p>Set an integer property of an object.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>str</code>)           \u2013            <p>The property to set.</p> </li> <li> <code>value</code>               (<code>int</code>)           \u2013            <p>The value to set the property to.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ObjectInterface.set_property_ex","title":"set_property_ex  <code>async</code>","text":"<pre><code>set_property_ex(property: str, value: str) -&gt; None\n</code></pre> <p>Set a string property of an object.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>str</code>)           \u2013            <p>The property to set.</p> </li> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>The value to set the property to.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ObjectInterface.is_enumerator_supported","title":"is_enumerator_supported  <code>async</code>","text":"<pre><code>is_enumerator_supported(interface_name: str, enumeration_name: str, enumerator_name: str) -&gt; bool\n</code></pre> <p>Check if an enumerator is supported by an object.</p> <p>Parameters:</p> <ul> <li> <code>interface_name</code>               (<code>str</code>)           \u2013            <p>The name of the interface to check.</p> </li> <li> <code>enumeration_name</code>               (<code>str</code>)           \u2013            <p>The name of the enumeration to check.</p> </li> <li> <code>enumerator_name</code>               (<code>str</code>)           \u2013            <p>The name of the enumerator to check.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True if the enumerator is supported, False otherwise.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ObjectInterface.get_m_time","title":"get_m_time  <code>async</code>","text":"<pre><code>get_m_time() -&gt; datetime\n</code></pre> <p>Get the modification time of an object.</p> <p>Returns:</p> <ul> <li> <code>datetime</code>           \u2013            <p>The modification time of the object, as a datetime object.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ObjectInterface.get_d_name","title":"get_d_name  <code>async</code>","text":"<pre><code>get_d_name() -&gt; str\n</code></pre> <p>Get the display name of an object.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The display name of the object.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ObjectInterface.get_area","title":"get_area  <code>async</code>","text":"<pre><code>get_area() -&gt; int\n</code></pre> <p>Get the area of an object.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The area of the object.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ObjectInterface.get_supported_enum_values","title":"get_supported_enum_values  <code>async</code>","text":"<pre><code>get_supported_enum_values(interface: type[Interface], enum: type[IntEnumT]) -&gt; list[IntEnumT]\n</code></pre> <p>Get all supported enum values of an object.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.PowerSensorInterface","title":"PowerSensorInterface","text":"<p>               Bases: <code>Interface</code></p> <p>Power sensor interface.</p> <p>Methods:</p> <ul> <li> <code>get_power</code>             \u2013              <p>Get the value of a power sensor.</p> </li> <li> <code>set_power</code>             \u2013              <p>Set the value of a power sensor.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.PowerSensorInterface.get_power","title":"get_power  <code>async</code>","text":"<pre><code>get_power(*, hw: bool = False) -&gt; Decimal\n</code></pre> <p>Get the value of a power sensor.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The value of the power sensor, in Watts.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.PowerSensorInterface.set_power","title":"set_power  <code>async</code>","text":"<pre><code>set_power(value: Decimal, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the value of a power sensor.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>Decimal</code>)           \u2013            <p>The value to set, in Watts.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface","title":"RGBLoadInterface","text":"<p>               Bases: <code>Interface</code></p> <p>RGB load interface.</p> <p>Classes:</p> <ul> <li> <code>RGBChannel</code>           \u2013            <p>The RGB color channels.</p> </li> <li> <code>HSLAttribute</code>           \u2013            <p>The HSL color attributes.</p> </li> <li> <code>ColorName</code>           \u2013            <p>Color.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>set_rgb</code>             \u2013              <p>Set the color of an RGB load.</p> </li> <li> <code>get_rgb</code>             \u2013              <p>Get a single RGB color channel of a load from the controller.</p> </li> <li> <code>set_hsl</code>             \u2013              <p>Set the color of an HSL load.</p> </li> <li> <code>get_hsl</code>             \u2013              <p>Get a single HSL color attribute of a load from the controller.</p> </li> <li> <code>dissolve_rgb</code>             \u2013              <p>Transition the color of an RGB load over a number of seconds.</p> </li> <li> <code>dissolve_hsl</code>             \u2013              <p>Transition the color of an HSL load over a number of seconds.</p> </li> <li> <code>set_dissolve_rate</code>             \u2013              <p>Set the default dissolve rate for RGB and HSL transitions.</p> </li> <li> <code>get_dissolve_rate</code>             \u2013              <p>Get the default dissolve rate for RGB and HSL transitions.</p> </li> <li> <code>increment_rgb_component</code>             \u2013              <p>Increment a single RGB color channel of a load.</p> </li> <li> <code>decrement_rgb_component</code>             \u2013              <p>Decrement a single RGB color channel of a load.</p> </li> <li> <code>set_rgb_component</code>             \u2013              <p>Set a single RGB(W) color channel of a load.</p> </li> <li> <code>increment_hsl_attribute</code>             \u2013              <p>Increment a single HSL color attribute of a load.</p> </li> <li> <code>decrement_hsl_attribute</code>             \u2013              <p>Decrement a single HSL color attribute of a load.</p> </li> <li> <code>set_hsl_attribute</code>             \u2013              <p>Set a single HSL color attribute of a load.</p> </li> <li> <code>stop</code>             \u2013              <p>Stop the transition.</p> </li> <li> <code>next_preset</code>             \u2013              <p>Change to the next lighting preset.</p> </li> <li> <code>previous_preset</code>             \u2013              <p>Change to the previous lighting preset.</p> </li> <li> <code>next_effect</code>             \u2013              <p>Change to the next lighting effect.</p> </li> <li> <code>previous_effect</code>             \u2013              <p>Change to the previous lighting effect.</p> </li> <li> <code>set_preset</code>             \u2013              <p>Change to a specific lighting preset.</p> </li> <li> <code>get_preset</code>             \u2013              <p>Get the current lighting preset.</p> </li> <li> <code>set_effect</code>             \u2013              <p>Change to a specific lighting effect.</p> </li> <li> <code>get_effect</code>             \u2013              <p>Get the current lighting effect.</p> </li> <li> <code>set_color_by_name</code>             \u2013              <p>Set the color of an RGB load by name.</p> </li> <li> <code>get_color_name</code>             \u2013              <p>Get the name of the color of a load from the controller.</p> </li> <li> <code>get_color</code>             \u2013              <p>Get the RGB/RGBW color of a load from the controller.</p> </li> <li> <code>set_rgbw</code>             \u2013              <p>Set the color of an RGBW load.</p> </li> <li> <code>get_rgbw</code>             \u2013              <p>Get a single RGBW color channel of a load from the controller.</p> </li> <li> <code>get_transition_level</code>             \u2013              <p>Get the transition level of a load.</p> </li> <li> <code>dissolve_rgbw</code>             \u2013              <p>Transition the color of an RGBW load over a number of seconds.</p> </li> <li> <code>get_rgb_color</code>             \u2013              <p>Get the RGB color of a load from the controller.</p> </li> <li> <code>get_rgbw_color</code>             \u2013              <p>Get the RGBW color of a load from the controller.</p> </li> <li> <code>get_hsl_color</code>             \u2013              <p>Get the HSL color of a load from the controller.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.RGBChannel","title":"RGBChannel","text":"<p>               Bases: <code>IntEnum</code></p> <p>The RGB color channels.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.HSLAttribute","title":"HSLAttribute","text":"<p>               Bases: <code>IntEnum</code></p> <p>The HSL color attributes.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.ColorName","title":"ColorName","text":"<p>               Bases: <code>IntEnum</code></p> <p>Color.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.set_rgb","title":"set_rgb  <code>async</code>","text":"<pre><code>set_rgb(red: int = 255, green: int = 255, blue: int = 255, *, sw: bool = False, follow_level: bool = False) -&gt; None\n</code></pre> <p>Set the color of an RGB load.</p> <p>Parameters:</p> <ul> <li> <code>red</code>               (<code>int</code>, default:                   <code>255</code> )           \u2013            <p>The red value of the color, (0-255)</p> </li> <li> <code>green</code>               (<code>int</code>, default:                   <code>255</code> )           \u2013            <p>The green value of the color, (0-255)</p> </li> <li> <code>blue</code>               (<code>int</code>, default:                   <code>255</code> )           \u2013            <p>The blue value of the color, (0-255)</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> <li> <code>follow_level</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Follow the level of the load.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.get_rgb","title":"get_rgb  <code>async</code>","text":"<pre><code>get_rgb(channel: RGBChannel, *, hw: bool = False) -&gt; int\n</code></pre> <p>Get a single RGB color channel of a load from the controller.</p> <p>Parameters:</p> <ul> <li> <code>channel</code>               (<code>RGBChannel</code>)           \u2013            <p>The channel to get the color of.</p> </li> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the RGB channel, 0-255.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.set_hsl","title":"set_hsl  <code>async</code>","text":"<pre><code>set_hsl(hue: int, saturation: float | Decimal, lightness: float | Decimal, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the color of an HSL load.</p> <p>Parameters:</p> <ul> <li> <code>hue</code>               (<code>int</code>)           \u2013            <p>The hue value of the color, in degrees (0-360).</p> </li> <li> <code>saturation</code>               (<code>float | Decimal</code>)           \u2013            <p>The saturation value of the color, in percent (0-100).</p> </li> <li> <code>lightness</code>               (<code>float | Decimal</code>)           \u2013            <p>The lightness value of the color, in percent (0-100).</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.get_hsl","title":"get_hsl  <code>async</code>","text":"<pre><code>get_hsl(attribute: HSLAttribute, *, hw: bool = False) -&gt; int\n</code></pre> <p>Get a single HSL color attribute of a load from the controller.</p> <p>Parameters:</p> <ul> <li> <code>attribute</code>               (<code>HSLAttribute</code>)           \u2013            <p>The attribute to get the value of.</p> </li> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the HSL attribute, 0-360 for hue, 0-100 for saturation and</p> </li> <li> <code>int</code>           \u2013            <p>lightness.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.dissolve_rgb","title":"dissolve_rgb  <code>async</code>","text":"<pre><code>dissolve_rgb(red: int, green: int, blue: int, rate: float | Decimal, *, follow_level: bool = False) -&gt; None\n</code></pre> <p>Transition the color of an RGB load over a number of seconds.</p> <p>Parameters:</p> <ul> <li> <code>red</code>               (<code>int</code>)           \u2013            <p>The new red value of the color, (0-255)</p> </li> <li> <code>green</code>               (<code>int</code>)           \u2013            <p>The new green value of the color, (0-255)</p> </li> <li> <code>blue</code>               (<code>int</code>)           \u2013            <p>The new blue value of the color, (0-255)</p> </li> <li> <code>rate</code>               (<code>float | Decimal</code>)           \u2013            <p>The number of seconds the transition should take.</p> </li> <li> <code>follow_level</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Follow the level of the load.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.dissolve_hsl","title":"dissolve_hsl  <code>async</code>","text":"<pre><code>dissolve_hsl(hue: int, saturation: float | Decimal, lightness: float | Decimal, rate: float | Decimal) -&gt; None\n</code></pre> <p>Transition the color of an HSL load over a number of seconds.</p> <p>Parameters:</p> <ul> <li> <code>hue</code>               (<code>int</code>)           \u2013            <p>The new hue value of the color, in degrees (0-360).</p> </li> <li> <code>saturation</code>               (<code>float | Decimal</code>)           \u2013            <p>The new saturation value of the color, in percent (0-100).</p> </li> <li> <code>lightness</code>               (<code>float | Decimal</code>)           \u2013            <p>The new lightness value of the color, in percent (0-100).</p> </li> <li> <code>rate</code>               (<code>float | Decimal</code>)           \u2013            <p>The number of seconds the transition should take.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.set_dissolve_rate","title":"set_dissolve_rate  <code>async</code>","text":"<pre><code>set_dissolve_rate(rate: float | Decimal, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the default dissolve rate for RGB and HSL transitions.</p> <p>Parameters:</p> <ul> <li> <code>rate</code>               (<code>float | Decimal</code>)           \u2013            <p>The number of seconds the transition should take.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.get_dissolve_rate","title":"get_dissolve_rate  <code>async</code>","text":"<pre><code>get_dissolve_rate(*, hw: bool = False) -&gt; Decimal\n</code></pre> <p>Get the default dissolve rate for RGB and HSL transitions.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The number of seconds the transition should take.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.increment_rgb_component","title":"increment_rgb_component  <code>async</code>","text":"<pre><code>increment_rgb_component(channel: RGBChannel) -&gt; None\n</code></pre> <p>Increment a single RGB color channel of a load.</p> <p>Parameters:</p> <ul> <li> <code>channel</code>               (<code>RGBChannel</code>)           \u2013            <p>The channel to increment the color of.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.decrement_rgb_component","title":"decrement_rgb_component  <code>async</code>","text":"<pre><code>decrement_rgb_component(channel: RGBChannel) -&gt; None\n</code></pre> <p>Decrement a single RGB color channel of a load.</p> <p>Parameters:</p> <ul> <li> <code>channel</code>               (<code>RGBChannel</code>)           \u2013            <p>The channel to decrement the color of.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.set_rgb_component","title":"set_rgb_component  <code>async</code>","text":"<pre><code>set_rgb_component(channel: RGBChannel, value: int) -&gt; None\n</code></pre> <p>Set a single RGB(W) color channel of a load.</p> <p>Parameters:</p> <ul> <li> <code>channel</code>               (<code>RGBChannel</code>)           \u2013            <p>The channel to set the color of.</p> </li> <li> <code>value</code>               (<code>int</code>)           \u2013            <p>The value to set the channel to, 0-255.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.increment_hsl_attribute","title":"increment_hsl_attribute  <code>async</code>","text":"<pre><code>increment_hsl_attribute(attribute: HSLAttribute) -&gt; None\n</code></pre> <p>Increment a single HSL color attribute of a load.</p> <p>Parameters:</p> <ul> <li> <code>attribute</code>               (<code>HSLAttribute</code>)           \u2013            <p>The attribute to increment the value of.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.decrement_hsl_attribute","title":"decrement_hsl_attribute  <code>async</code>","text":"<pre><code>decrement_hsl_attribute(attribute: HSLAttribute) -&gt; None\n</code></pre> <p>Decrement a single HSL color attribute of a load.</p> <p>Parameters:</p> <ul> <li> <code>attribute</code>               (<code>HSLAttribute</code>)           \u2013            <p>The attribute to decrement the value of.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.set_hsl_attribute","title":"set_hsl_attribute  <code>async</code>","text":"<pre><code>set_hsl_attribute(attribute: HSLAttribute, value: int) -&gt; None\n</code></pre> <p>Set a single HSL color attribute of a load.</p> <p>Parameters:</p> <ul> <li> <code>attribute</code>               (<code>HSLAttribute</code>)           \u2013            <p>The attribute to set the value of.</p> </li> <li> <code>value</code>               (<code>int</code>)           \u2013            <p>The value to set the attribute to, 0-360 for hue, 0-100 for saturation and lightness.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.stop","title":"stop  <code>async</code>","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop the transition.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.next_preset","title":"next_preset  <code>async</code>","text":"<pre><code>next_preset() -&gt; None\n</code></pre> <p>Change to the next lighting preset.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.previous_preset","title":"previous_preset  <code>async</code>","text":"<pre><code>previous_preset() -&gt; None\n</code></pre> <p>Change to the previous lighting preset.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.next_effect","title":"next_effect  <code>async</code>","text":"<pre><code>next_effect() -&gt; None\n</code></pre> <p>Change to the next lighting effect.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.previous_effect","title":"previous_effect  <code>async</code>","text":"<pre><code>previous_effect() -&gt; None\n</code></pre> <p>Change to the previous lighting effect.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.set_preset","title":"set_preset  <code>async</code>","text":"<pre><code>set_preset(index: int, *, sw: bool = False) -&gt; None\n</code></pre> <p>Change to a specific lighting preset.</p> <p>Parameters:</p> <ul> <li> <code>index</code>               (<code>int</code>)           \u2013            <p>The index of the preset to change to.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.get_preset","title":"get_preset  <code>async</code>","text":"<pre><code>get_preset(*, hw: bool = False) -&gt; int\n</code></pre> <p>Get the current lighting preset.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The index of the current preset.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.set_effect","title":"set_effect  <code>async</code>","text":"<pre><code>set_effect(index: int, *, sw: bool = False) -&gt; None\n</code></pre> <p>Change to a specific lighting effect.</p> <p>Parameters:</p> <ul> <li> <code>index</code>               (<code>int</code>)           \u2013            <p>The index of the effect to change to.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.get_effect","title":"get_effect  <code>async</code>","text":"<pre><code>get_effect(*, hw: bool = False) -&gt; int\n</code></pre> <p>Get the current lighting effect.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The index of the current effect.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.set_color_by_name","title":"set_color_by_name  <code>async</code>","text":"<pre><code>set_color_by_name(color: ColorName) -&gt; None\n</code></pre> <p>Set the color of an RGB load by name.</p> <p>Parameters:</p> <ul> <li> <code>color</code>               (<code>ColorName</code>)           \u2013            <p>The name of the color to set the load to.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.get_color_name","title":"get_color_name  <code>async</code>","text":"<pre><code>get_color_name() -&gt; ColorName\n</code></pre> <p>Get the name of the color of a load from the controller.</p> <p>Returns:</p> <ul> <li> <code>ColorName</code>           \u2013            <p>The name of the color.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.get_color","title":"get_color  <code>async</code>","text":"<pre><code>get_color(*, hw: bool = False) -&gt; int\n</code></pre> <p>Get the RGB/RGBW color of a load from the controller.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The RGB(W) value of the color as a packed big-endian integer.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.set_rgbw","title":"set_rgbw  <code>async</code>","text":"<pre><code>set_rgbw(red: int = 255, green: int = 255, blue: int = 255, white: int = 255, *, sw: bool = False, follow_level: bool = False) -&gt; None\n</code></pre> <p>Set the color of an RGBW load.</p> <p>Parameters:</p> <ul> <li> <code>red</code>               (<code>int</code>, default:                   <code>255</code> )           \u2013            <p>The red value of the color, (0-255)</p> </li> <li> <code>green</code>               (<code>int</code>, default:                   <code>255</code> )           \u2013            <p>The green value of the color, (0-255)</p> </li> <li> <code>blue</code>               (<code>int</code>, default:                   <code>255</code> )           \u2013            <p>The blue value of the color, (0-255)</p> </li> <li> <code>white</code>               (<code>int</code>, default:                   <code>255</code> )           \u2013            <p>The white value of the color, (0-255)</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> <li> <code>follow_level</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Follow the level of the load.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.get_rgbw","title":"get_rgbw  <code>async</code>","text":"<pre><code>get_rgbw(channel: int, *, hw: bool = False) -&gt; int\n</code></pre> <p>Get a single RGBW color channel of a load from the controller.</p> <p>Parameters:</p> <ul> <li> <code>channel</code>               (<code>int</code>)           \u2013            <p>The channel to get the color of.</p> </li> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the RGBW channel, 0-255.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.get_transition_level","title":"get_transition_level  <code>async</code>","text":"<pre><code>get_transition_level() -&gt; Decimal\n</code></pre> <p>Get the transition level of a load.</p> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The transition level of the load.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.dissolve_rgbw","title":"dissolve_rgbw  <code>async</code>","text":"<pre><code>dissolve_rgbw(red: int, green: int, blue: int, white: int, rate: float | Decimal, *, follow_level: bool = False) -&gt; None\n</code></pre> <p>Transition the color of an RGBW load over a number of seconds.</p> <p>Parameters:</p> <ul> <li> <code>red</code>               (<code>int</code>)           \u2013            <p>The new red value of the color, (0-255)</p> </li> <li> <code>green</code>               (<code>int</code>)           \u2013            <p>The new green value of the color, (0-255)</p> </li> <li> <code>blue</code>               (<code>int</code>)           \u2013            <p>The new blue value of the color, (0-255)</p> </li> <li> <code>white</code>               (<code>int</code>)           \u2013            <p>The new white value of the color, (0-255)</p> </li> <li> <code>rate</code>               (<code>float | Decimal</code>)           \u2013            <p>The number of seconds the transition should take.</p> </li> <li> <code>follow_level</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Follow the level of the load.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.get_rgb_color","title":"get_rgb_color  <code>async</code>","text":"<pre><code>get_rgb_color() -&gt; tuple[int, int, int]\n</code></pre> <p>Get the RGB color of a load from the controller.</p> <p>Returns:</p> <ul> <li> <code>tuple[int, int, int]</code>           \u2013            <p>The value of the RGB color as a tuple of (red, green, blue).</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.get_rgbw_color","title":"get_rgbw_color  <code>async</code>","text":"<pre><code>get_rgbw_color() -&gt; tuple[int, int, int, int]\n</code></pre> <p>Get the RGBW color of a load from the controller.</p> <p>Returns:</p> <ul> <li> <code>tuple[int, int, int, int]</code>           \u2013            <p>The value of the RGBW color as a tuple of (red, green, blue, white).</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.RGBLoadInterface.get_hsl_color","title":"get_hsl_color  <code>async</code>","text":"<pre><code>get_hsl_color() -&gt; tuple[int, int, int]\n</code></pre> <p>Get the HSL color of a load from the controller.</p> <p>Returns:</p> <ul> <li> <code>tuple[int, int, int]</code>           \u2013            <p>The value of the HSL color as a tuple of (hue, saturation, lightness).</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.SensorInterface","title":"SensorInterface","text":"<p>               Bases: <code>Interface</code></p> <p>Sensor interface.</p> <p>Methods:</p> <ul> <li> <code>get_level</code>             \u2013              <p>Get the level of a sensor.</p> </li> <li> <code>set_level</code>             \u2013              <p>Set the level of a sensor.</p> </li> <li> <code>get_high_range</code>             \u2013              <p>Get the high range of a sensor.</p> </li> <li> <code>get_low_range</code>             \u2013              <p>Get the low range of a sensor.</p> </li> <li> <code>get_hold_on_time</code>             \u2013              <p>Get the hold on time of a sensor.</p> </li> <li> <code>is_tracking</code>             \u2013              <p>Get whether the sensor is tracking.</p> </li> <li> <code>get_tracking_delta</code>             \u2013              <p>Get the tracking delta of a sensor.</p> </li> <li> <code>get_tracking_min</code>             \u2013              <p>Get the tracking min time of a sensor.</p> </li> <li> <code>get_tracking_max</code>             \u2013              <p>Get the tracking max time of a sensor.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.SensorInterface.get_level","title":"get_level  <code>async</code>","text":"<pre><code>get_level(*, hw: bool = False) -&gt; Decimal\n</code></pre> <p>Get the level of a sensor.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The level of the sensor.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.SensorInterface.set_level","title":"set_level  <code>async</code>","text":"<pre><code>set_level(level: Decimal) -&gt; None\n</code></pre> <p>Set the level of a sensor.</p> <p>Parameters:</p> <ul> <li> <code>level</code>               (<code>Decimal</code>)           \u2013            <p>The level to set the sensor to.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.SensorInterface.get_high_range","title":"get_high_range  <code>async</code>","text":"<pre><code>get_high_range() -&gt; Decimal\n</code></pre> <p>Get the high range of a sensor.</p> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The high range of the sensor.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.SensorInterface.get_low_range","title":"get_low_range  <code>async</code>","text":"<pre><code>get_low_range() -&gt; Decimal\n</code></pre> <p>Get the low range of a sensor.</p> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The low range of the sensor.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.SensorInterface.get_hold_on_time","title":"get_hold_on_time  <code>async</code>","text":"<pre><code>get_hold_on_time() -&gt; Decimal\n</code></pre> <p>Get the hold on time of a sensor.</p> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The hold on time of the sensor, in seconds.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.SensorInterface.is_tracking","title":"is_tracking  <code>async</code>","text":"<pre><code>is_tracking() -&gt; bool\n</code></pre> <p>Get whether the sensor is tracking.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Whether the sensor is tracking.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.SensorInterface.get_tracking_delta","title":"get_tracking_delta  <code>async</code>","text":"<pre><code>get_tracking_delta() -&gt; Decimal\n</code></pre> <p>Get the tracking delta of a sensor.</p> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The tracking delta of the sensor.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.SensorInterface.get_tracking_min","title":"get_tracking_min  <code>async</code>","text":"<pre><code>get_tracking_min() -&gt; Decimal\n</code></pre> <p>Get the tracking min time of a sensor.</p> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The tracking min time of the sensor, in seconds.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.SensorInterface.get_tracking_max","title":"get_tracking_max  <code>async</code>","text":"<pre><code>get_tracking_max() -&gt; Decimal\n</code></pre> <p>Get the tracking max time of a sensor.</p> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The tracking max time of the sensor, in seconds.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.SounderInterface","title":"SounderInterface","text":"<p>               Bases: <code>Interface</code></p> <p>Sounder interface.</p> <p>Classes:</p> <ul> <li> <code>Status</code>           \u2013            <p>Sounder status.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_frequency</code>             \u2013              <p>Get the frequency of the keypad speaker.</p> </li> <li> <code>set_frequency</code>             \u2013              <p>Set the frequency of the keypad speaker.</p> </li> <li> <code>get_duration</code>             \u2013              <p>Get the length of time the keypad speaker will sound.</p> </li> <li> <code>set_duration</code>             \u2013              <p>Set the length of time the keypad speaker will sound.</p> </li> <li> <code>get_status</code>             \u2013              <p>Get the status of the keypad speaker.</p> </li> <li> <code>set_status</code>             \u2013              <p>Set the status of the keypad speaker.</p> </li> <li> <code>play_fx</code>             \u2013              <p>Play a sound effect on the keypad speaker.</p> </li> <li> <code>turn_on</code>             \u2013              <p>Turn on the keypad speaker.</p> </li> <li> <code>turn_off</code>             \u2013              <p>Turn off the keypad speaker.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.SounderInterface.Status","title":"Status","text":"<p>               Bases: <code>IntEnum</code></p> <p>Sounder status.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.SounderInterface.get_frequency","title":"get_frequency  <code>async</code>","text":"<pre><code>get_frequency(*, hw: bool = False) -&gt; Decimal\n</code></pre> <p>Get the frequency of the keypad speaker.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The frequency of the keypad speaker in Hz.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.SounderInterface.set_frequency","title":"set_frequency  <code>async</code>","text":"<pre><code>set_frequency(frequency: float | Decimal) -&gt; None\n</code></pre> <p>Set the frequency of the keypad speaker.</p> <p>Parameters:</p> <ul> <li> <code>frequency</code>               (<code>float | Decimal</code>)           \u2013            <p>The frequency to set the sounder to, in Hz.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.SounderInterface.get_duration","title":"get_duration  <code>async</code>","text":"<pre><code>get_duration(*, hw: bool = False) -&gt; Decimal\n</code></pre> <p>Get the length of time the keypad speaker will sound.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The duration of the keypad speaker sound in seconds.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.SounderInterface.set_duration","title":"set_duration  <code>async</code>","text":"<pre><code>set_duration(duration: Decimal) -&gt; None\n</code></pre> <p>Set the length of time the keypad speaker will sound.</p> <p>Parameters:</p> <ul> <li> <code>duration</code>               (<code>Decimal</code>)           \u2013            <p>The duration to set the sounder to, in seconds.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.SounderInterface.get_status","title":"get_status  <code>async</code>","text":"<pre><code>get_status(*, hw: bool = False) -&gt; Status\n</code></pre> <p>Get the status of the keypad speaker.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>The status of the keypad speaker.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.SounderInterface.set_status","title":"set_status  <code>async</code>","text":"<pre><code>set_status(status: Status) -&gt; None\n</code></pre> <p>Set the status of the keypad speaker.</p> <p>Parameters:</p> <ul> <li> <code>status</code>               (<code>Status</code>)           \u2013            <p>The status to set the keypad speaker to.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.SounderInterface.play_fx","title":"play_fx  <code>async</code>","text":"<pre><code>play_fx(effect: int, duration: float = 0, volume: float = 0) -&gt; None\n</code></pre> <p>Play a sound effect on the keypad speaker.</p> <p>Parameters:</p> <ul> <li> <code>effect</code>               (<code>int</code>)           \u2013            <p>The effect to play.</p> </li> <li> <code>duration</code>               (<code>float</code>, default:                   <code>0</code> )           \u2013            <p>The duration to play the FX for, in seconds, 0 for default.</p> </li> <li> <code>volume</code>               (<code>float</code>, default:                   <code>0</code> )           \u2013            <p>The volume to play the FX at, as a percentage, 0 for default.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.SounderInterface.turn_on","title":"turn_on  <code>async</code>","text":"<pre><code>turn_on() -&gt; None\n</code></pre> <p>Turn on the keypad speaker.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.SounderInterface.turn_off","title":"turn_off  <code>async</code>","text":"<pre><code>turn_off() -&gt; None\n</code></pre> <p>Turn off the keypad speaker.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.TaskInterface","title":"TaskInterface","text":"<p>               Bases: <code>Interface</code></p> <p>Task interface.</p> <p>Classes:</p> <ul> <li> <code>Status</code>           \u2013            <p>Task status.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>start</code>             \u2013              <p>Start a task.</p> </li> <li> <code>stop</code>             \u2013              <p>Stop a running task.</p> </li> <li> <code>cancel</code>             \u2013              <p>Cancel a scheduled task.</p> </li> <li> <code>is_running</code>             \u2013              <p>Get the running state of a task.</p> </li> <li> <code>get_state</code>             \u2013              <p>Get the state of a task.</p> </li> <li> <code>set_state</code>             \u2013              <p>Set the state of a task.</p> </li> <li> <code>get_status</code>             \u2013              <p>Get the status of a task.</p> </li> <li> <code>get_context_state</code>             \u2013              <p>Get the context-aware task state.</p> </li> <li> <code>has_context_state</code>             \u2013              <p>Check if the task is context-aware.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.TaskInterface.Status","title":"Status","text":"<p>               Bases: <code>IntEnum</code></p> <p>Task status.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.TaskInterface.start","title":"start  <code>async</code>","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start a task.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.TaskInterface.stop","title":"stop  <code>async</code>","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop a running task.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.TaskInterface.cancel","title":"cancel  <code>async</code>","text":"<pre><code>cancel() -&gt; None\n</code></pre> <p>Cancel a scheduled task.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.TaskInterface.is_running","title":"is_running  <code>async</code>","text":"<pre><code>is_running() -&gt; bool\n</code></pre> <p>Get the running state of a task.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.TaskInterface.get_state","title":"get_state  <code>async</code>","text":"<pre><code>get_state() -&gt; int\n</code></pre> <p>Get the state of a task.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The LED state of the task.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.TaskInterface.set_state","title":"set_state  <code>async</code>","text":"<pre><code>set_state(state: int) -&gt; None\n</code></pre> <p>Set the state of a task.</p> <p>Parameters:</p> <ul> <li> <code>state</code>               (<code>int</code>)           \u2013            <p>The state to set the task to.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.TaskInterface.get_status","title":"get_status  <code>async</code>","text":"<pre><code>get_status() -&gt; Status\n</code></pre> <p>Get the status of a task.</p> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>The status of the task.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.TaskInterface.get_context_state","title":"get_context_state  <code>async</code>","text":"<pre><code>get_context_state() -&gt; int\n</code></pre> <p>Get the context-aware task state.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The context aware state of the task.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.TaskInterface.has_context_state","title":"has_context_state  <code>async</code>","text":"<pre><code>has_context_state() -&gt; bool\n</code></pre> <p>Check if the task is context-aware.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True if the task is context-aware, False otherwise.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.TemperatureInterface","title":"TemperatureInterface","text":"<p>               Bases: <code>Interface</code></p> <p>Temperature interface.</p> <p>Methods:</p> <ul> <li> <code>get_value</code>             \u2013              <p>Get the value of a temperature sensor.</p> </li> <li> <code>set_value</code>             \u2013              <p>Set the value of a temperature sensor.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.TemperatureInterface.get_value","title":"get_value  <code>async</code>","text":"<pre><code>get_value(*, hw: bool = False) -&gt; Decimal\n</code></pre> <p>Get the value of a temperature sensor.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The value of the temperature sensor, in degrees Celsius.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.TemperatureInterface.set_value","title":"set_value  <code>async</code>","text":"<pre><code>set_value(value: Decimal, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the value of a temperature sensor.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>Decimal</code>)           \u2013            <p>The value to set the sensor to.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface","title":"ThermostatInterface","text":"<p>               Bases: <code>Interface</code></p> <p>Thermostat interface.</p> <p>Classes:</p> <ul> <li> <code>OperationMode</code>           \u2013            <p>Thermostat operation mode.</p> </li> <li> <code>FanMode</code>           \u2013            <p>Thermostat fan mode.</p> </li> <li> <code>DayMode</code>           \u2013            <p>Thermostat day mode.</p> </li> <li> <code>HoldMode</code>           \u2013            <p>The hold mode of the thermostat.</p> </li> <li> <code>Status</code>           \u2013            <p>The status of the thermostat.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_indoor_temperature</code>             \u2013              <p>Get the current indoor temperature.</p> </li> <li> <code>set_indoor_temperature</code>             \u2013              <p>Set the cached indoor temperature.</p> </li> <li> <code>get_outdoor_temperature</code>             \u2013              <p>Get the current outdoor temperature.</p> </li> <li> <code>set_outdoor_temperature</code>             \u2013              <p>Set the cached outdoor temperature.</p> </li> <li> <code>get_heat_set_point</code>             \u2013              <p>Get the current heat set point.</p> </li> <li> <code>set_heat_set_point</code>             \u2013              <p>Set the current heat set point.</p> </li> <li> <code>get_cool_set_point</code>             \u2013              <p>Get the current cool set point.</p> </li> <li> <code>set_cool_set_point</code>             \u2013              <p>Set the current cool set point.</p> </li> <li> <code>get_operation_mode</code>             \u2013              <p>Get the current operation mode.</p> </li> <li> <code>set_operation_mode</code>             \u2013              <p>Set the current operation mode.</p> </li> <li> <code>get_fan_mode</code>             \u2013              <p>Get the current fan mode.</p> </li> <li> <code>set_fan_mode</code>             \u2013              <p>Set the current fan mode.</p> </li> <li> <code>get_day_mode</code>             \u2013              <p>Get the current day mode.</p> </li> <li> <code>set_day_mode</code>             \u2013              <p>Set the current day mode.</p> </li> <li> <code>set_hold_mode</code>             \u2013              <p>Set the current hold mode.</p> </li> <li> <code>get_hold_mode</code>             \u2013              <p>Get the current hold mode.</p> </li> <li> <code>get_status</code>             \u2013              <p>Get the current status.</p> </li> <li> <code>set_status</code>             \u2013              <p>Set the cached status.</p> </li> <li> <code>get_auto_set_point</code>             \u2013              <p>Get the current auto set point.</p> </li> <li> <code>set_auto_set_point</code>             \u2013              <p>Set the current auto set point.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.OperationMode","title":"OperationMode","text":"<p>               Bases: <code>IntEnum</code></p> <p>Thermostat operation mode.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.FanMode","title":"FanMode","text":"<p>               Bases: <code>IntEnum</code></p> <p>Thermostat fan mode.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.DayMode","title":"DayMode","text":"<p>               Bases: <code>IntEnum</code></p> <p>Thermostat day mode.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.HoldMode","title":"HoldMode","text":"<p>               Bases: <code>IntEnum</code></p> <p>The hold mode of the thermostat.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.Status","title":"Status","text":"<p>               Bases: <code>IntEnum</code></p> <p>The status of the thermostat.</p>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.get_indoor_temperature","title":"get_indoor_temperature  <code>async</code>","text":"<pre><code>get_indoor_temperature(*, hw: bool = False) -&gt; Decimal\n</code></pre> <p>Get the current indoor temperature.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The indoor temperature of the thermostat, in degrees Celsius.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.set_indoor_temperature","title":"set_indoor_temperature  <code>async</code>","text":"<pre><code>set_indoor_temperature(temp: float | Decimal) -&gt; None\n</code></pre> <p>Set the cached indoor temperature.</p> <p>Parameters:</p> <ul> <li> <code>temp</code>               (<code>float | Decimal</code>)           \u2013            <p>The indoor temperature to set, in degrees Celsius.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.get_outdoor_temperature","title":"get_outdoor_temperature  <code>async</code>","text":"<pre><code>get_outdoor_temperature(*, hw: bool = False) -&gt; Decimal\n</code></pre> <p>Get the current outdoor temperature.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The outdoor temperature of the thermostat, in degrees Celsius.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.set_outdoor_temperature","title":"set_outdoor_temperature  <code>async</code>","text":"<pre><code>set_outdoor_temperature(temp: float | Decimal) -&gt; None\n</code></pre> <p>Set the cached outdoor temperature.</p> <p>Parameters:</p> <ul> <li> <code>temp</code>               (<code>float | Decimal</code>)           \u2013            <p>The outdoor temperature to set, in degrees Celsius.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.get_heat_set_point","title":"get_heat_set_point  <code>async</code>","text":"<pre><code>get_heat_set_point(*, hw: bool = False) -&gt; Decimal\n</code></pre> <p>Get the current heat set point.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The heat set point of the thermostat, in degrees Celsius.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.set_heat_set_point","title":"set_heat_set_point  <code>async</code>","text":"<pre><code>set_heat_set_point(temp: float | Decimal, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the current heat set point.</p> <p>Parameters:</p> <ul> <li> <code>temp</code>               (<code>float | Decimal</code>)           \u2013            <p>The heat set point to set, in degrees Celsius.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.get_cool_set_point","title":"get_cool_set_point  <code>async</code>","text":"<pre><code>get_cool_set_point(*, hw: bool = False) -&gt; Decimal\n</code></pre> <p>Get the current cool set point.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The cool set point of the thermostat, in degrees Celsius.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.set_cool_set_point","title":"set_cool_set_point  <code>async</code>","text":"<pre><code>set_cool_set_point(temp: float | Decimal, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the current cool set point.</p> <p>Parameters:</p> <ul> <li> <code>temp</code>               (<code>float | Decimal</code>)           \u2013            <p>The cool set point to set, in degrees Celsius.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.get_operation_mode","title":"get_operation_mode  <code>async</code>","text":"<pre><code>get_operation_mode(*, hw: bool = False) -&gt; OperationMode\n</code></pre> <p>Get the current operation mode.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OperationMode</code>           \u2013            <p>The operation mode of the thermostat.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.set_operation_mode","title":"set_operation_mode  <code>async</code>","text":"<pre><code>set_operation_mode(mode: int, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the current operation mode.</p> <p>Parameters:</p> <ul> <li> <code>mode</code>               (<code>int</code>)           \u2013            <p>The operation mode to set.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.get_fan_mode","title":"get_fan_mode  <code>async</code>","text":"<pre><code>get_fan_mode(*, hw: bool = False) -&gt; FanMode\n</code></pre> <p>Get the current fan mode.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>FanMode</code>           \u2013            <p>The fan mode of the thermostat.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.set_fan_mode","title":"set_fan_mode  <code>async</code>","text":"<pre><code>set_fan_mode(mode: int, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the current fan mode.</p> <p>Parameters:</p> <ul> <li> <code>mode</code>               (<code>int</code>)           \u2013            <p>The fan mode to set.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.get_day_mode","title":"get_day_mode  <code>async</code>","text":"<pre><code>get_day_mode(*, hw: bool = False) -&gt; DayMode\n</code></pre> <p>Get the current day mode.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DayMode</code>           \u2013            <p>The day mode of the thermostat.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.set_day_mode","title":"set_day_mode  <code>async</code>","text":"<pre><code>set_day_mode(mode: int, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the current day mode.</p> <p>Parameters:</p> <ul> <li> <code>mode</code>               (<code>int</code>)           \u2013            <p>The day mode to set.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.set_hold_mode","title":"set_hold_mode  <code>async</code>","text":"<pre><code>set_hold_mode(mode: int, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the current hold mode.</p> <p>Parameters:</p> <ul> <li> <code>mode</code>               (<code>int</code>)           \u2013            <p>The hold mode to set.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.get_hold_mode","title":"get_hold_mode  <code>async</code>","text":"<pre><code>get_hold_mode(*, hw: bool = False) -&gt; HoldMode\n</code></pre> <p>Get the current hold mode.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>HoldMode</code>           \u2013            <p>The hold mode of the thermostat.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.get_status","title":"get_status  <code>async</code>","text":"<pre><code>get_status(*, hw: bool = False) -&gt; Status\n</code></pre> <p>Get the current status.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>The status of the thermostat.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.set_status","title":"set_status  <code>async</code>","text":"<pre><code>set_status(status: int) -&gt; None\n</code></pre> <p>Set the cached status.</p> <p>Parameters:</p> <ul> <li> <code>status</code>               (<code>int</code>)           \u2013            <p>The status to set.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.get_auto_set_point","title":"get_auto_set_point  <code>async</code>","text":"<pre><code>get_auto_set_point(*, hw: bool = False) -&gt; Decimal\n</code></pre> <p>Get the current auto set point.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The auto set point of the thermostat, in degrees Celsius.</p> </li> </ul>"},{"location":"reference/aiovantage/object_interfaces/#aiovantage.object_interfaces.ThermostatInterface.set_auto_set_point","title":"set_auto_set_point  <code>async</code>","text":"<pre><code>set_auto_set_point(temp: float | Decimal, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the current auto set point.</p> <p>Parameters:</p> <ul> <li> <code>temp</code>               (<code>float | Decimal</code>)           \u2013            <p>The auto set point to set, in degrees Celsius.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/objects/","title":"aiovantage.objects","text":""},{"location":"reference/aiovantage/objects/#aiovantage.objects","title":"aiovantage.objects","text":"<p>Vantage object definitions.</p> <p>This module provides a (non-exhaustive) collection of classes that represent the various object types that are managed by a Vantage system.</p> <p>Vantage objects define configuration properties, which are properties that are set during system programming, through Design Center.</p> <p>Objects are hierarchical, with all objects ultimately deriving from <code>SystemObject</code>.</p> <p>Each object implements one or more object interfaces, which provide state properties and methods for interacting with the object.</p> <p>Classes:</p> <ul> <li> <code>AnemoSensor</code>           \u2013            <p>AnemoSensor (wind sensor) object.</p> </li> <li> <code>Area</code>           \u2013            <p>Area object.</p> </li> <li> <code>BackBox</code>           \u2013            <p>BackBox object.</p> </li> <li> <code>Blind</code>           \u2013            <p>Blind object.</p> </li> <li> <code>BlindGroup</code>           \u2013            <p>BlindGroup object.</p> </li> <li> <code>Button</code>           \u2013            <p>Button object.</p> </li> <li> <code>ChildDevice</code>           \u2013            <p>Base class for child device (driver-provided) objects.</p> </li> <li> <code>ContactInput</code>           \u2013            <p>Contact Input.</p> </li> <li> <code>CustomDevice</code>           \u2013            <p>Base class for custom device (driver provided) objects.</p> </li> <li> <code>DCPowerProfile</code>           \u2013            <p>DCPowerProfile object.</p> </li> <li> <code>Dimmer</code>           \u2013            <p>ScenePoint Dimmer Station.</p> </li> <li> <code>DINContactInput</code>           \u2013            <p>DIN Contact Input Station.</p> </li> <li> <code>DINLowVoltageRelayStation</code>           \u2013            <p>DIN Low Voltage Relay Station.</p> </li> <li> <code>DINStation</code>           \u2013            <p>Base class for DIN station objects.</p> </li> <li> <code>DryContact</code>           \u2013            <p>DryContact object.</p> </li> <li> <code>DualRelayStation</code>           \u2013            <p>ScenePoint Dual Relay Station.</p> </li> <li> <code>EqCtrl</code>           \u2013            <p>Equinox 40 Station.</p> </li> <li> <code>EqUX</code>           \u2013            <p>Equinox 41 or Equinox 73 touchscreen.</p> </li> <li> <code>GMem</code>           \u2013            <p>GMem (variable) object.</p> </li> <li> <code>HighVoltageRelayStation</code>           \u2013            <p>High Voltage Relay Station.</p> </li> <li> <code>IRX2</code>           \u2013            <p>IRX II.</p> </li> <li> <code>Keypad</code>           \u2013            <p>Keypad Station.</p> </li> <li> <code>LightSensor</code>           \u2013            <p>Light sensor object.</p> </li> <li> <code>Load</code>           \u2013            <p>Load object.</p> </li> <li> <code>LoadGroup</code>           \u2013            <p>LoadGroup object.</p> </li> <li> <code>LocationObject</code>           \u2013            <p>Base class for system objects in an area.</p> </li> <li> <code>LowVoltageRelayStation</code>           \u2013            <p>Low Voltage Relay Station.</p> </li> <li> <code>Master</code>           \u2013            <p>Master (InFusion Controller) object.</p> </li> <li> <code>Module</code>           \u2013            <p>Module object.</p> </li> <li> <code>ModuleGen2</code>           \u2013            <p>ModuleGen2 object, eg. SDM12-EM, UDM08-EM.</p> </li> <li> <code>OmniSensor</code>           \u2013            <p>OmniSensor object.</p> </li> <li> <code>ParentDevice</code>           \u2013            <p>Base class for parent device objects.</p> </li> <li> <code>PortDevice</code>           \u2013            <p>Base class for Vantage port device (driver-provided) objects.</p> </li> <li> <code>PowerProfile</code>           \u2013            <p>Power Profile object.</p> </li> <li> <code>PWMPowerProfile</code>           \u2013            <p>PWM power profile object.</p> </li> <li> <code>QISBlind</code>           \u2013            <p>QIS Shade object.</p> </li> <li> <code>QubeBlind</code>           \u2013            <p>Qz Shade object.</p> </li> <li> <code>RelayBlind</code>           \u2013            <p>Relay blind object.</p> </li> <li> <code>RS232Station</code>           \u2013            <p>RS-232 Station.</p> </li> <li> <code>RS485Station</code>           \u2013            <p>RS-485 Station.</p> </li> <li> <code>ScenePointRelay</code>           \u2013            <p>ScenePoint Relay Station.</p> </li> <li> <code>Sensor</code>           \u2013            <p>Sensor object.</p> </li> <li> <code>SomfyRS485GroupChild</code>           \u2013            <p>Somfy RS-485 SDN 2.0 blind group.</p> </li> <li> <code>SomfyRS485SDN20Port</code>           \u2013            <p>Somfy RS-485 SDN 2.0 port device.</p> </li> <li> <code>SomfyRS485ShadeChild</code>           \u2013            <p>Somfy RS-485 SDN 2.0 blind.</p> </li> <li> <code>SomfyURTSI2GroupChild</code>           \u2013            <p>Somfy URTSI 2 blind group.</p> </li> <li> <code>SomfyURTSI2Port</code>           \u2013            <p>Somfy URTSI 2 port device.</p> </li> <li> <code>SomfyURTSI2ShadeChild</code>           \u2013            <p>Somfy URTSI 2 blind.</p> </li> <li> <code>StationBus</code>           \u2013            <p>Station bus object.</p> </li> <li> <code>StationObject</code>           \u2013            <p>Base class for all station objects.</p> </li> <li> <code>SystemObject</code>           \u2013            <p>Base class for all objects.</p> </li> <li> <code>Task</code>           \u2013            <p>Task object.</p> </li> <li> <code>Temperature</code>           \u2013            <p>Temperature object.</p> </li> <li> <code>Thermostat</code>           \u2013            <p>Thermostat object.</p> </li> <li> <code>Parent</code>           \u2013            <p>Vantage parent type.</p> </li> <li> <code>VantageDDGColorLoad</code>           \u2013            <p>DMX/DALI Gateway color load object.</p> </li> <li> <code>VantageDGColorLoad</code>           \u2013            <p>DMX Gateway color load object.</p> </li> <li> <code>VantageDmxDaliGateway</code>           \u2013            <p>DMX/DALI Gateway station.</p> </li> <li> <code>VantageDmxGateway</code>           \u2013            <p>DMX Gateway.</p> </li> <li> <code>VantageGenericHVACRS485CompoundChild</code>           \u2013            <p>Vantage Generic HVAC RS485 compound child device.</p> </li> <li> <code>VantageGenericHVACRS485Port</code>           \u2013            <p>Vantage Generic HVAC RS485 port device.</p> </li> <li> <code>VantageGenericHVACRS485TechContactsChild</code>           \u2013            <p>Vantage Generic HVAC RS485 tech contacts child device.</p> </li> <li> <code>VantageGenericHVACRS485ZoneChild</code>           \u2013            <p>Vantage Generic HVAC RS485 zone child device.</p> </li> <li> <code>VantageGenericHVACRS485ZoneWithoutFanSpeedChild</code>           \u2013            <p>Vantage Generic HVAC RS485 zone child device without fan speed.</p> </li> <li> <code>VantageHVACIULineChild</code>           \u2013            <p>Vantage HVAC-IU line child device.</p> </li> <li> <code>VantageHVACIUPort</code>           \u2013            <p>Vantage HVAC-IU port device.</p> </li> <li> <code>VantageHVACIUZoneChild</code>           \u2013            <p>Vantage HVAC-IU zone child device.</p> </li> <li> <code>VantageVirtualThermostatPort</code>           \u2013            <p>Vantage Virtual Thermostat.</p> </li> </ul>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.AnemoSensor","title":"AnemoSensor  <code>dataclass</code>","text":"<pre><code>AnemoSensor(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, parent: Parent, out_of_range: int = 0, in_range: int = 0, range_high: float = 10.0, range_low: float = 0.0, hold_on_time: float)\n</code></pre> <p>               Bases: <code>Sensor</code>, <code>SensorInterface</code>, <code>AnemoSensorInterface</code></p> <p>AnemoSensor (wind sensor) object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.Area","title":"Area  <code>dataclass</code>","text":"<pre><code>Area(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, area_type: str, enclosure_area: int | None = None)\n</code></pre> <p>               Bases: <code>LocationObject</code></p> <p>Area object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.BackBox","title":"BackBox  <code>dataclass</code>","text":"<pre><code>BackBox(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, keypad_style: int)\n</code></pre> <p>               Bases: <code>LocationObject</code></p> <p>BackBox object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.Blind","title":"Blind  <code>dataclass</code>","text":"<pre><code>Blind(*, shade_type: str | None = None, shade_orientation: str | None = None, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, parent: Parent, movement: Movement | None = None)\n</code></pre> <p>               Bases: <code>LocationObject</code>, <code>BlindInterface</code></p> <p>Blind object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.BlindGroup","title":"BlindGroup  <code>dataclass</code>","text":"<pre><code>BlindGroup(*, shade_type: str | None = None, shade_orientation: str | None = None, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, category: int, blind_table: list[int] = list[int]())\n</code></pre> <p>               Bases: <code>LocationObject</code>, <code>BlindInterface</code></p> <p>BlindGroup object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.Button","title":"Button  <code>dataclass</code>","text":"<pre><code>Button(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, parent: Parent, down: int = 0, up: int = 0, hold: int = 0, text1: str, text2: str, placement_table: list[int] = list[int](), button_style: int, led_style: int)\n</code></pre> <p>               Bases: <code>SystemObject</code>, <code>ButtonInterface</code></p> <p>Button object.</p> <p>Attributes:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>Return the button text.</p> </li> </ul>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.Button.text","title":"text  <code>property</code>","text":"<pre><code>text: str\n</code></pre> <p>Return the button text.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.ChildDevice","title":"ChildDevice  <code>dataclass</code>","text":"<pre><code>ChildDevice(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, version: float, device_category: str = '', log: str = 'None', parent: Parent)\n</code></pre> <p>               Bases: <code>CustomDevice</code></p> <p>Base class for child device (driver-provided) objects.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.ContactInput","title":"ContactInput  <code>dataclass</code>","text":"<pre><code>ContactInput(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, serial_number: str, bus: int)\n</code></pre> <p>               Bases: <code>StationObject</code></p> <p>Contact Input.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.CustomDevice","title":"CustomDevice  <code>dataclass</code>","text":"<pre><code>CustomDevice(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, version: float, device_category: str = '', log: str = 'None')\n</code></pre> <p>               Bases: <code>LocationObject</code></p> <p>Base class for custom device (driver provided) objects.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.DCPowerProfile","title":"DCPowerProfile  <code>dataclass</code>","text":"<pre><code>DCPowerProfile(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, min: float, max: float, adjust: int | None = None, freq: int | None = None, inductive: bool | None = None)\n</code></pre> <p>               Bases: <code>PowerProfile</code></p> <p>DCPowerProfile object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.Dimmer","title":"Dimmer  <code>dataclass</code>","text":"<pre><code>Dimmer(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, serial_number: str, bus: int, parent: Parent, gang: int, distributed: bool, no_neutral: bool = False, voltage: int | None = None, alert: str | None = None)\n</code></pre> <p>               Bases: <code>Keypad</code></p> <p>ScenePoint Dimmer Station.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.DINContactInput","title":"DINContactInput  <code>dataclass</code>","text":"<pre><code>DINContactInput(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, serial_number: str, bus: int, din_enclosure: DINEnclosure | None = None, module_count: int | None = None)\n</code></pre> <p>               Bases: <code>DINStation</code></p> <p>DIN Contact Input Station.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.DINLowVoltageRelayStation","title":"DINLowVoltageRelayStation  <code>dataclass</code>","text":"<pre><code>DINLowVoltageRelayStation(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, serial_number: str, bus: int, din_enclosure: DINEnclosure | None = None, module_count: int | None = None)\n</code></pre> <p>               Bases: <code>DINStation</code></p> <p>DIN Low Voltage Relay Station.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.DINStation","title":"DINStation  <code>dataclass</code>","text":"<pre><code>DINStation(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, serial_number: str, bus: int, din_enclosure: DINEnclosure | None = None, module_count: int | None = None)\n</code></pre> <p>               Bases: <code>StationObject</code></p> <p>Base class for DIN station objects.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.DryContact","title":"DryContact  <code>dataclass</code>","text":"<pre><code>DryContact(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, parent: Parent, down: int = 0, up: int = 0, reverse_polarity: bool, hold_on_time: float = 0)\n</code></pre> <p>               Bases: <code>LocationObject</code>, <code>ButtonInterface</code></p> <p>DryContact object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.DualRelayStation","title":"DualRelayStation  <code>dataclass</code>","text":"<pre><code>DualRelayStation(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, serial_number: str, bus: int, parent: Parent, shade_controller: bool, reverse_shade: bool)\n</code></pre> <p>               Bases: <code>Keypad</code></p> <p>ScenePoint Dual Relay Station.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.EqCtrl","title":"EqCtrl  <code>dataclass</code>","text":"<pre><code>EqCtrl(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, serial_number: str, bus: int, pages: int, activate: int, style: int, header: Header, zone: int, preset_table: list[int] = list[int]())\n</code></pre> <p>               Bases: <code>StationObject</code>, <code>SounderInterface</code></p> <p>Equinox 40 Station.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.EqUX","title":"EqUX  <code>dataclass</code>","text":"<pre><code>EqUX(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, serial_number: str, bus: int, style: int, profile_table: list[int] = list[int](), activate: int)\n</code></pre> <p>               Bases: <code>StationObject</code></p> <p>Equinox 41 or Equinox 73 touchscreen.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.GMem","title":"GMem  <code>dataclass</code>","text":"<pre><code>GMem(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, category: int, data: Data, persistent: bool = True, tag: Tag)\n</code></pre> <p>               Bases: <code>SystemObject</code>, <code>GMemInterface</code></p> <p>GMem (variable) object.</p> <p>Attributes:</p> <ul> <li> <code>is_bool</code>               (<code>bool</code>)           \u2013            <p>Return True if GMem is boolean type.</p> </li> <li> <code>is_str</code>               (<code>bool</code>)           \u2013            <p>Return True if GMem is string type.</p> </li> <li> <code>is_int</code>               (<code>bool</code>)           \u2013            <p>Return True if GMem is integer type.</p> </li> <li> <code>is_object_id</code>               (<code>bool</code>)           \u2013            <p>Return True if GMem is a pointer to an object.</p> </li> <li> <code>is_fixed</code>               (<code>bool</code>)           \u2013            <p>Return True if GMem is a fixed point number.</p> </li> </ul>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.GMem.is_bool","title":"is_bool  <code>property</code>","text":"<pre><code>is_bool: bool\n</code></pre> <p>Return True if GMem is boolean type.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.GMem.is_str","title":"is_str  <code>property</code>","text":"<pre><code>is_str: bool\n</code></pre> <p>Return True if GMem is string type.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.GMem.is_int","title":"is_int  <code>property</code>","text":"<pre><code>is_int: bool\n</code></pre> <p>Return True if GMem is integer type.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.GMem.is_object_id","title":"is_object_id  <code>property</code>","text":"<pre><code>is_object_id: bool\n</code></pre> <p>Return True if GMem is a pointer to an object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.GMem.is_fixed","title":"is_fixed  <code>property</code>","text":"<pre><code>is_fixed: bool\n</code></pre> <p>Return True if GMem is a fixed point number.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.HighVoltageRelayStation","title":"HighVoltageRelayStation  <code>dataclass</code>","text":"<pre><code>HighVoltageRelayStation(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, serial_number: str, bus: int)\n</code></pre> <p>               Bases: <code>StationObject</code></p> <p>High Voltage Relay Station.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.IRX2","title":"IRX2  <code>dataclass</code>","text":"<pre><code>IRX2(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, serial_number: str, bus: int, ir_pass_thru: IRPassThru, led_auto_off: bool = False)\n</code></pre> <p>               Bases: <code>StationObject</code></p> <p>IRX II.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.Keypad","title":"Keypad  <code>dataclass</code>","text":"<pre><code>Keypad(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, serial_number: str, bus: int, parent: Parent)\n</code></pre> <p>               Bases: <code>StationObject</code>, <code>SounderInterface</code></p> <p>Keypad Station.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.LightSensor","title":"LightSensor  <code>dataclass</code>","text":"<pre><code>LightSensor(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, parent: Parent)\n</code></pre> <p>               Bases: <code>Sensor</code>, <code>SensorInterface</code>, <code>LightSensorInterface</code></p> <p>Light sensor object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.Load","title":"Load  <code>dataclass</code>","text":"<pre><code>Load(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, parent: Parent, contractor_number: str, load_type: str = 'Incandescent', power: int = 100, power_profile: int, override_level: Decimal = Decimal('100'))\n</code></pre> <p>               Bases: <code>LocationObject</code>, <code>LoadInterface</code></p> <p>Load object.</p> <p>Attributes:</p> <ul> <li> <code>is_relay</code>               (<code>bool</code>)           \u2013            <p>Return True if the load type is a relay.</p> </li> <li> <code>is_motor</code>               (<code>bool</code>)           \u2013            <p>Return True if the load type is a motor.</p> </li> <li> <code>is_light</code>               (<code>bool</code>)           \u2013            <p>Return True if the load type is inferred to be a light.</p> </li> <li> <code>is_on</code>               (<code>bool</code>)           \u2013            <p>Return True if the load is on.</p> </li> </ul>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.Load.is_relay","title":"is_relay  <code>property</code>","text":"<pre><code>is_relay: bool\n</code></pre> <p>Return True if the load type is a relay.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.Load.is_motor","title":"is_motor  <code>property</code>","text":"<pre><code>is_motor: bool\n</code></pre> <p>Return True if the load type is a motor.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.Load.is_light","title":"is_light  <code>property</code>","text":"<pre><code>is_light: bool\n</code></pre> <p>Return True if the load type is inferred to be a light.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.Load.is_on","title":"is_on  <code>property</code>","text":"<pre><code>is_on: bool\n</code></pre> <p>Return True if the load is on.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.LoadGroup","title":"LoadGroup  <code>dataclass</code>","text":"<pre><code>LoadGroup(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, load_table: list[int] = list[int]())\n</code></pre> <p>               Bases: <code>LocationObject</code>, <code>LoadInterface</code></p> <p>LoadGroup object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.LocationObject","title":"LocationObject  <code>dataclass</code>","text":"<pre><code>LocationObject(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None)\n</code></pre> <p>               Bases: <code>SystemObject</code></p> <p>Base class for system objects in an area.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.LowVoltageRelayStation","title":"LowVoltageRelayStation  <code>dataclass</code>","text":"<pre><code>LowVoltageRelayStation(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, serial_number: str, bus: int)\n</code></pre> <p>               Bases: <code>StationObject</code></p> <p>Low Voltage Relay Station.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.Master","title":"Master  <code>dataclass</code>","text":"<pre><code>Master(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, number: int, boot: int = 0, volts: float = 24.0, amps: float = 2.5, din_enclosure: DINEnclosure | None = None, module_count: int | None = None, power_supply: int | None = None, serial_number: int | None = None)\n</code></pre> <p>               Bases: <code>SystemObject</code>, <code>IntrospectionInterface</code>, <code>ConfigurationInterface</code></p> <p>Master (InFusion Controller) object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.Module","title":"Module  <code>dataclass</code>","text":"<pre><code>Module(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, parent: Parent, line_feed_table: list[LineFeed] = list[LineFeed](), join1: bool, join2: bool, join3: bool, join4: bool, quiet_mode: bool)\n</code></pre> <p>               Bases: <code>SystemObject</code></p> <p>Module object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.ModuleGen2","title":"ModuleGen2  <code>dataclass</code>","text":"<pre><code>ModuleGen2(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, parent: Parent, line_feed_table: list[LineFeed] = list[LineFeed](), quiet_mode: bool = False, legacy_mode: bool = False, alert: int)\n</code></pre> <p>               Bases: <code>SystemObject</code></p> <p>ModuleGen2 object, eg. SDM12-EM, UDM08-EM.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.OmniSensor","title":"OmniSensor  <code>dataclass</code>","text":"<pre><code>OmniSensor(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, parent: Parent, get: Get, set: Set)\n</code></pre> <p>               Bases: <code>Sensor</code>, <code>SensorInterface</code></p> <p>OmniSensor object.</p> <p>Methods:</p> <ul> <li> <code>get_level</code>             \u2013              <p>Get the value of the OmniSensor object, using cached value if available.</p> </li> <li> <code>set_level</code>             \u2013              <p>Set the value of the OmniSensor object.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>is_current_sensor</code>               (<code>bool</code>)           \u2013            <p>Return True if the sensor is a current sensor.</p> </li> <li> <code>is_power_sensor</code>               (<code>bool</code>)           \u2013            <p>Return True if the sensor is a power sensor.</p> </li> <li> <code>is_temperature_sensor</code>               (<code>bool</code>)           \u2013            <p>Return True if the sensor is a temperature sensor.</p> </li> </ul>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.OmniSensor.is_current_sensor","title":"is_current_sensor  <code>property</code>","text":"<pre><code>is_current_sensor: bool\n</code></pre> <p>Return True if the sensor is a current sensor.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.OmniSensor.is_power_sensor","title":"is_power_sensor  <code>property</code>","text":"<pre><code>is_power_sensor: bool\n</code></pre> <p>Return True if the sensor is a power sensor.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.OmniSensor.is_temperature_sensor","title":"is_temperature_sensor  <code>property</code>","text":"<pre><code>is_temperature_sensor: bool\n</code></pre> <p>Return True if the sensor is a temperature sensor.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.OmniSensor.get_level","title":"get_level  <code>async</code>","text":"<pre><code>get_level(*, hw: bool = False) -&gt; Decimal\n</code></pre> <p>Get the value of the OmniSensor object, using cached value if available.</p> <p>Parameters:</p> <ul> <li> <code>hw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Fetch the value from hardware instead of cache.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Decimal</code>           \u2013            <p>The level of the sensor.</p> </li> </ul>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.OmniSensor.set_level","title":"set_level  <code>async</code>","text":"<pre><code>set_level(level: Decimal, *, sw: bool = False) -&gt; None\n</code></pre> <p>Set the value of the OmniSensor object.</p> <p>Parameters:</p> <ul> <li> <code>level</code>               (<code>Decimal</code>)           \u2013            <p>The value to set the sensor to.</p> </li> <li> <code>sw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set the cached value instead of the hardware value.</p> </li> </ul>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.ParentDevice","title":"ParentDevice  <code>dataclass</code>","text":"<pre><code>ParentDevice(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, version: float, device_category: str = '', log: str = 'None')\n</code></pre> <p>               Bases: <code>CustomDevice</code></p> <p>Base class for parent device objects.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.PortDevice","title":"PortDevice  <code>dataclass</code>","text":"<pre><code>PortDevice(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None)\n</code></pre> <p>               Bases: <code>LocationObject</code></p> <p>Base class for Vantage port device (driver-provided) objects.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.PowerProfile","title":"PowerProfile  <code>dataclass</code>","text":"<pre><code>PowerProfile(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, min: float, max: float, adjust: int | None = None, freq: int | None = None, inductive: bool | None = None)\n</code></pre> <p>               Bases: <code>SystemObject</code></p> <p>Power Profile object.</p> <p>Attributes:</p> <ul> <li> <code>is_dimmable</code>               (<code>bool</code>)           \u2013            <p>Return True if loads with this profile are dimmable.</p> </li> </ul>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.PowerProfile.is_dimmable","title":"is_dimmable  <code>property</code>","text":"<pre><code>is_dimmable: bool\n</code></pre> <p>Return True if loads with this profile are dimmable.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.PWMPowerProfile","title":"PWMPowerProfile  <code>dataclass</code>","text":"<pre><code>PWMPowerProfile(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, min: float, max: float, adjust: int | None = None, freq: int | None = None, inductive: bool | None = None, inverted: bool = False)\n</code></pre> <p>               Bases: <code>DCPowerProfile</code></p> <p>PWM power profile object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.QISBlind","title":"QISBlind  <code>dataclass</code>","text":"<pre><code>QISBlind(*, shade_type: str | None = None, shade_orientation: str | None = None, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, serial_number: str, bus: int, upper_limit: float, lower_limit: float, movement: Movement)\n</code></pre> <p>               Bases: <code>StationObject</code>, <code>BlindInterface</code></p> <p>QIS Shade object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.QubeBlind","title":"QubeBlind  <code>dataclass</code>","text":"<pre><code>QubeBlind(*, shade_type: str | None = None, shade_orientation: str | None = None, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, serial_number: str, bus: int, upper_limit: float, lower_limit: float, movement: Movement, alert: int = 0, low_battery_threshold: float = 20.0)\n</code></pre> <p>               Bases: <code>StationObject</code>, <code>BlindInterface</code></p> <p>Qz Shade object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.RelayBlind","title":"RelayBlind  <code>dataclass</code>","text":"<pre><code>RelayBlind(*, shade_type: str | None = None, shade_orientation: str | None = None, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None)\n</code></pre> <p>               Bases: <code>LocationObject</code>, <code>BlindInterface</code></p> <p>Relay blind object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.RS232Station","title":"RS232Station  <code>dataclass</code>","text":"<pre><code>RS232Station(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, serial_number: str, bus: int)\n</code></pre> <p>               Bases: <code>StationObject</code></p> <p>RS-232 Station.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.RS485Station","title":"RS485Station  <code>dataclass</code>","text":"<pre><code>RS485Station(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, serial_number: str, bus: int)\n</code></pre> <p>               Bases: <code>StationObject</code></p> <p>RS-485 Station.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.ScenePointRelay","title":"ScenePointRelay  <code>dataclass</code>","text":"<pre><code>ScenePointRelay(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, serial_number: str, bus: int, parent: Parent)\n</code></pre> <p>               Bases: <code>Keypad</code></p> <p>ScenePoint Relay Station.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.Sensor","title":"Sensor  <code>dataclass</code>","text":"<pre><code>Sensor(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None)\n</code></pre> <p>               Bases: <code>LocationObject</code></p> <p>Sensor object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.SomfyRS485GroupChild","title":"SomfyRS485GroupChild  <code>dataclass</code>","text":"<pre><code>SomfyRS485GroupChild(*, shade_type: str | None = None, shade_orientation: str | None = None, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, version: float, device_category: str = '', log: str = 'None', parent: Parent)\n</code></pre> <p>               Bases: <code>ChildDevice</code>, <code>BlindInterface</code></p> <p>Somfy RS-485 SDN 2.0 blind group.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.SomfyRS485SDN20Port","title":"SomfyRS485SDN20Port  <code>dataclass</code>","text":"<pre><code>SomfyRS485SDN20Port(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None)\n</code></pre> <p>               Bases: <code>PortDevice</code></p> <p>Somfy RS-485 SDN 2.0 port device.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.SomfyRS485ShadeChild","title":"SomfyRS485ShadeChild  <code>dataclass</code>","text":"<pre><code>SomfyRS485ShadeChild(*, shade_type: str | None = None, shade_orientation: str | None = None, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, version: float, device_category: str = '', log: str = 'None', parent: Parent)\n</code></pre> <p>               Bases: <code>ChildDevice</code>, <code>BlindInterface</code></p> <p>Somfy RS-485 SDN 2.0 blind.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.SomfyURTSI2GroupChild","title":"SomfyURTSI2GroupChild  <code>dataclass</code>","text":"<pre><code>SomfyURTSI2GroupChild(*, shade_type: str | None = None, shade_orientation: str | None = None, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, version: float, device_category: str = '', log: str = 'None', parent: Parent)\n</code></pre> <p>               Bases: <code>ChildDevice</code>, <code>BlindInterface</code></p> <p>Somfy URTSI 2 blind group.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.SomfyURTSI2Port","title":"SomfyURTSI2Port  <code>dataclass</code>","text":"<pre><code>SomfyURTSI2Port(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None)\n</code></pre> <p>               Bases: <code>PortDevice</code></p> <p>Somfy URTSI 2 port device.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.SomfyURTSI2ShadeChild","title":"SomfyURTSI2ShadeChild  <code>dataclass</code>","text":"<pre><code>SomfyURTSI2ShadeChild(*, shade_type: str | None = None, shade_orientation: str | None = None, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, version: float, device_category: str = '', log: str = 'None', parent: Parent)\n</code></pre> <p>               Bases: <code>ChildDevice</code>, <code>BlindInterface</code></p> <p>Somfy URTSI 2 blind.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.StationBus","title":"StationBus  <code>dataclass</code>","text":"<pre><code>StationBus(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, parent: Parent)\n</code></pre> <p>               Bases: <code>SystemObject</code></p> <p>Station bus object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.StationObject","title":"StationObject  <code>dataclass</code>","text":"<pre><code>StationObject(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, serial_number: str, bus: int)\n</code></pre> <p>               Bases: <code>LocationObject</code></p> <p>Base class for all station objects.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.SystemObject","title":"SystemObject  <code>dataclass</code>","text":"<pre><code>SystemObject(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None)\n</code></pre> <p>               Bases: <code>ObjectInterface</code></p> <p>Base class for all objects.</p> <p>Methods:</p> <ul> <li> <code>vantage_type</code>             \u2013              <p>Return the Vantage type for this object.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>Return the ID of the object.</p> </li> </ul>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.SystemObject.id","title":"id  <code>property</code>","text":"<pre><code>id: int\n</code></pre> <p>Return the ID of the object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.SystemObject.vantage_type","title":"vantage_type  <code>classmethod</code>","text":"<pre><code>vantage_type() -&gt; str\n</code></pre> <p>Return the Vantage type for this object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.Task","title":"Task  <code>dataclass</code>","text":"<pre><code>Task(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None)\n</code></pre> <p>               Bases: <code>SystemObject</code>, <code>TaskInterface</code></p> <p>Task object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.Temperature","title":"Temperature  <code>dataclass</code>","text":"<pre><code>Temperature(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, parent: Parent, out_of_range: int = 0, in_range: int = 0, range_high: float, range_low: float, hold_on_time: float, temp: int = 0)\n</code></pre> <p>               Bases: <code>Sensor</code>, <code>TemperatureInterface</code></p> <p>Temperature object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.Thermostat","title":"Thermostat  <code>dataclass</code>","text":"<pre><code>Thermostat(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, serial_number: str, bus: int, day_mode_event: int = 0, fan_mode_event: int = 0, operation_mode_event: int = 0, external_temperature: int, display_clock: bool = True, pseudo_mode: bool = True, humidistat: bool = False)\n</code></pre> <p>               Bases: <code>StationObject</code>, <code>ThermostatInterface</code></p> <p>Thermostat object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.Parent","title":"Parent  <code>dataclass</code>","text":"<pre><code>Parent(*, vid: int, position: int)\n</code></pre> <p>Vantage parent type.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.VantageDDGColorLoad","title":"VantageDDGColorLoad  <code>dataclass</code>","text":"<pre><code>VantageDDGColorLoad(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, parent: Parent, color_type: ColorType, min_temp: int, max_temp: int)\n</code></pre> <p>               Bases: <code>LocationObject</code>, <code>LoadInterface</code>, <code>RGBLoadInterface</code>, <code>ColorTemperatureInterface</code></p> <p>DMX/DALI Gateway color load object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.VantageDGColorLoad","title":"VantageDGColorLoad  <code>dataclass</code>","text":"<pre><code>VantageDGColorLoad(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, parent: Parent, color_type: ColorType, min_temp: int, max_temp: int)\n</code></pre> <p>               Bases: <code>LocationObject</code>, <code>LoadInterface</code>, <code>RGBLoadInterface</code>, <code>ColorTemperatureInterface</code></p> <p>DMX Gateway color load object.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.VantageDmxDaliGateway","title":"VantageDmxDaliGateway  <code>dataclass</code>","text":"<pre><code>VantageDmxDaliGateway(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, serial_number: str, bus: int, ip_address: str, mode: str)\n</code></pre> <p>               Bases: <code>StationObject</code></p> <p>DMX/DALI Gateway station.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.VantageDmxGateway","title":"VantageDmxGateway  <code>dataclass</code>","text":"<pre><code>VantageDmxGateway(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None)\n</code></pre> <p>               Bases: <code>PortDevice</code></p> <p>DMX Gateway.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.VantageGenericHVACRS485CompoundChild","title":"VantageGenericHVACRS485CompoundChild  <code>dataclass</code>","text":"<pre><code>VantageGenericHVACRS485CompoundChild(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, version: float, device_category: str = '', log: str = 'None', parent: Parent, adress_number: int = 1)\n</code></pre> <p>               Bases: <code>ChildDevice</code>, <code>ThermostatInterface</code></p> <p>Vantage Generic HVAC RS485 compound child device.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.VantageGenericHVACRS485Port","title":"VantageGenericHVACRS485Port  <code>dataclass</code>","text":"<pre><code>VantageGenericHVACRS485Port(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, fan_boost_option: bool = False, fan_speed_settings: FanSpeedSettings, fan_individual_control: bool = False, receive_port: int, sensor_settings: SensorSettings, setpoint_settings: SetpointSettings)\n</code></pre> <p>               Bases: <code>PortDevice</code></p> <p>Vantage Generic HVAC RS485 port device.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.VantageGenericHVACRS485TechContactsChild","title":"VantageGenericHVACRS485TechContactsChild  <code>dataclass</code>","text":"<pre><code>VantageGenericHVACRS485TechContactsChild(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, version: float, device_category: str = '', log: str = 'None', parent: Parent)\n</code></pre> <p>               Bases: <code>ChildDevice</code></p> <p>Vantage Generic HVAC RS485 tech contacts child device.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.VantageGenericHVACRS485ZoneChild","title":"VantageGenericHVACRS485ZoneChild  <code>dataclass</code>","text":"<pre><code>VantageGenericHVACRS485ZoneChild(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, version: float, device_category: str = '', log: str = 'None', parent: Parent, indoor_settings: IndoorSettings, position_number: int = 1)\n</code></pre> <p>               Bases: <code>ChildDevice</code>, <code>ThermostatInterface</code>, <code>FanInterface</code></p> <p>Vantage Generic HVAC RS485 zone child device.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.VantageGenericHVACRS485ZoneWithoutFanSpeedChild","title":"VantageGenericHVACRS485ZoneWithoutFanSpeedChild  <code>dataclass</code>","text":"<pre><code>VantageGenericHVACRS485ZoneWithoutFanSpeedChild(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, version: float, device_category: str = '', log: str = 'None', parent: Parent, indoor_settings: IndoorSettings, position_number: int = 1)\n</code></pre> <p>               Bases: <code>ChildDevice</code>, <code>ThermostatInterface</code>, <code>FanInterface</code></p> <p>Vantage Generic HVAC RS485 zone child device without fan speed.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.VantageHVACIULineChild","title":"VantageHVACIULineChild  <code>dataclass</code>","text":"<pre><code>VantageHVACIULineChild(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, version: float, device_category: str = '', log: str = 'None', parent: Parent, device_type: str = 'Daikin', line_number: int = 1, operation_modes: OperationModes, fan_speeds: FanSpeeds)\n</code></pre> <p>               Bases: <code>ChildDevice</code></p> <p>Vantage HVAC-IU line child device.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.VantageHVACIUPort","title":"VantageHVACIUPort  <code>dataclass</code>","text":"<pre><code>VantageHVACIUPort(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, temperature_format: str = 'Celcius', outdoor_sensor: int, pauze_time: int = 1, serial_number: str = '0')\n</code></pre> <p>               Bases: <code>PortDevice</code></p> <p>Vantage HVAC-IU port device.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.VantageHVACIUZoneChild","title":"VantageHVACIUZoneChild  <code>dataclass</code>","text":"<pre><code>VantageHVACIUZoneChild(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, version: float, device_category: str = '', log: str = 'None', parent: Parent, main_zone: str, grouped_zones: list[str] = list[str](), indoor_sensors: list[IndoorSensor] = list[IndoorSensor]())\n</code></pre> <p>               Bases: <code>ChildDevice</code>, <code>ThermostatInterface</code>, <code>FanInterface</code></p> <p>Vantage HVAC-IU zone child device.</p>"},{"location":"reference/aiovantage/objects/#aiovantage.objects.VantageVirtualThermostatPort","title":"VantageVirtualThermostatPort  <code>dataclass</code>","text":"<pre><code>VantageVirtualThermostatPort(*, vid: int, master: int, name: str, model: str, note: str, d_name: str = '', m_time: datetime | None = None, area: int | None = None, location: str | None = None, change_over_valve: int, cool: Cool, fan: Fan, frost_mail_from: str, frost_mail_to: str, heat: Heat, indoor_sensor_holder: IndoorSensorHolder, outdoor_sensor_holder: OutdoorSensorHolder)\n</code></pre> <p>               Bases: <code>PortDevice</code>, <code>ThermostatInterface</code>, <code>FanInterface</code></p> <p>Vantage Virtual Thermostat.</p>"}]}